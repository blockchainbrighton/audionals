const ensureModule=async e=>{if(!e.audioWorklet)throw new Error("AudioWorklet not supported");return ensureModule._added||(ensureModule._added=e.audioWorklet.addModule("./js/worklet/dsp-processor.js")),ensureModule._added},noteToHz=(e,t)=>{if("number"==typeof t)return t;try{return e.Frequency(t).toFrequency()}catch{return 440}};class AWOscillator{constructor(e=440,t="sine"){const o=window.Tone,n=o?.getContext?.()?.rawContext||o?.context?._context||o?.context?._nativeAudioContext||o?.context?.rawContext||o?.context||new(window.AudioContext||window.webkitAudioContext);this._ctx=n,this._type=t||"sine",this._frequency=noteToHz(o,e),this._node=null,this._started=!1,this._ready=ensureModule(n).then((()=>{this._node=new AudioWorkletNode(n,"dsp-processor",{numberOfInputs:0,numberOfOutputs:1,outputChannelCount:[2],parameterData:{frequency:this._frequency}}),this._node.port.postMessage({type:this._type,detune:0,gain:1,seed:123456})})),this.frequency={get value(){return this._owner._frequency},set value(e){const t="number"==typeof e?e:noteToHz(window.Tone,e);if(this._owner._frequency=t,this._owner._node){const e=this._owner._node.parameters.get("frequency");e&&e.setValueAtTime(t,this._owner._ctx.currentTime)}}},this.frequency._owner=this,this.type=this._type}start(){return this._started=!0,this}stop(){return this}set(e){return e&&this._node&&(this._type=e,this._node.port.postMessage({type:e})),this}connect(e){return this._ready.then((()=>{const t=this._node,o=e;return t.connect(o),e}))}disconnect(){if(this._node)try{this._node.disconnect()}catch{}return this}get context(){return this._ctx}}const patchTone=()=>{const e=window,t=e.Tone;if(!t||!("Oscillator"in t))return!1;const o=t?.getContext?.()?.rawContext||t?.context?._context||t?.context?._nativeAudioContext||t?.context?.rawContext||t?.context||null;if(!o?.audioWorklet)return console.info("[AW Bridge] AudioWorklet not supported; keeping original Tone.Oscillator."),!1;try{return e.Tone=new Proxy(t,{get:(e,t,o)=>"Oscillator"===t?AWOscillator:Reflect.get(e,t,o)}),e.Tone.__OrigOscillator=t.Oscillator,console.info("[AW Bridge] Patched Tone via Proxy -> Oscillator routed to AudioWorklet"),!0}catch(o){console.warn("[AW Bridge] Failed to install Proxy; falling back to shadow object",o);try{const o=Object.create(t);return Object.defineProperty(o,"Oscillator",{configurable:!0,enumerable:!0,get:()=>AWOscillator}),o.__OrigOscillator=t.Oscillator,e.Tone=o,console.info("[AW Bridge] Patched Tone via shadow object -> Oscillator routed to AudioWorklet"),!0}catch(e){return console.warn("[AW Bridge] Failed to patch Tone.",e),!1}}};window.Tone?patchTone():window.addEventListener("tone-ready",(()=>patchTone()),{once:!0});