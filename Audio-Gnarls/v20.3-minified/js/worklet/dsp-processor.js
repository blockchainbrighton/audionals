class DSPProcessor extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"frequency",defaultValue:55,minValue:0,maxValue:2e4,automationRate:"k-rate"}]}constructor(t){super(),this.sampleRate_=sampleRate,this.phase=0,this.type="sine",this.detune=0,this.gain=1,this.gainTarget=1,this.freqSmooth=0,this.typePending=null,this.dcPrevIn=0,this.dcPrevOut=0;const e=20/this.sampleRate_;this.dc_a=1-2*Math.PI*e,this.dc_a<0?this.dc_a=0:this.dc_a>.9999&&(this.dc_a=.9999),this.seed=12345,this.noiseState=this.seed,this.alphaGain=Math.exp(-1/(.003*this.sampleRate_)),this.alphaFreq=Math.exp(-1/(.004*this.sampleRate_)),this.port.onmessage=t=>{const e=t.data||{};e.type&&(this.typePending=e.type),"number"==typeof e.detune&&(this.detune=e.detune),"number"==typeof e.gain&&(this.gainTarget=e.gain),"number"==typeof e.seed&&(this.seed=e.seed>>>0||1,this.noiseState=this.seed)}}noise(){return this.noiseState=1664525*this.noiseState+1013904223>>>0,(2147483647&this.noiseState)/1073741823*2-1}dcBlock(t){const e=t-this.dcPrevIn+this.dc_a*this.dcPrevOut;return this.dcPrevIn=t,this.dcPrevOut=e,e}process(t,e,s){const i=e[0];if(!i)return!0;const h=i[0],a=i[1]||i[0],n=s.frequency,r=this.sampleRate_,o=2*Math.PI,c=Math.max(0,(n.length,n[0]))||0;for(let t=0;t<h.length;t++){const e=c*Math.pow(2,this.detune/1200);this.freqSmooth=this.freqSmooth+(e-this.freqSmooth)*(1-this.alphaFreq);const s=o*(this.freqSmooth>0?this.freqSmooth:0)/r;let i;switch(this.typePending&&Math.abs(Math.sin(this.phase))<.001&&(this.type=this.typePending,this.typePending=null),this.phase+=s,this.phase>=o&&(this.phase-=o),this.type){case"square":i=Math.sign(Math.sin(this.phase))||0;break;case"triangle":i=2/Math.PI*Math.asin(Math.sin(this.phase));break;case"sawtooth":i=1-this.phase/o*2;break;case"noise":i=this.noise();break;default:i=Math.sin(this.phase)}this.gain=this.gain+(this.gainTarget-this.gain)*(1-this.alphaGain);const n=this.dcBlock(i*this.gain);h[t]=n,a[t]=n}return!0}}registerProcessor("dsp-processor",DSPProcessor);