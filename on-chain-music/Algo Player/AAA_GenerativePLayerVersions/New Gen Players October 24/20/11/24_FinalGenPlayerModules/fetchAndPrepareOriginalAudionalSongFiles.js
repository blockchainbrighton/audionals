// fetchAndPrepareOriginalAudionalSongFiles.js
(async()=>{const e=["projectName","artistName","projectBPM","currentSequence","channelURLs","channelVolume","channelPlaybackSpeed","trimSettings","projectChannelNames","startSliderValue","endSliderValue","totalSampleDuration","start","end","projectSequences","steps"],t=e.reduce(((e,t,n)=>(e[t]=n,e)),{}),n=Array.from({length:16},((e,t)=>String.fromCharCode(65+t))),r=n.reduce(((e,t,n)=>(e[t]=n,e)),{}),a=async n=>{try{const a=await fetch(n);if(!a.ok)throw new Error(`Network error for ${n}`);const o=new Uint8Array(await a.arrayBuffer()),c=window.pako.inflate(o),i=new TextDecoder("utf-8").decode(c),s=JSON.parse(i);return(n=>{const a=n=>Array.isArray(n)?n.map(a):n&&"object"==typeof n?Object.entries(n).reduce(((n,[o,c])=>{const i=e[o]||o;return n[i]="projectSequences"===i?Object.fromEntries(Object.entries(c).map((([e,n])=>[`Sequence${e.replace(/^s/,"")}`,Object.fromEntries(Object.entries(n).map((([e,n])=>{const a=(n[t.steps]||[]).flatMap((e=>{if("number"==typeof e)return e;if(e?.r){const[t,n]=e.r;return Array.from({length:n-t+1},((e,n)=>t+n))}return"string"==typeof e&&e.endsWith("r")?{index:parseInt(e.slice(0,-1),10),reverse:!0}:[]}));return[`ch${r[e]}`,{steps:a}]})))]))):a(c),n}),{}):n;return a(n)})(s)}catch(e){throw console.error(`[Initialization] Error fetching/deserializing ${n}:`,e),e}},o=e=>{const t=document.getElementById("artworkImage");t&&(t.src=e,t.parentElement.style.display="flex")},c=e=>{const t=e.numberOfChannels;let n=0;for(let r=0;r<t;r++){const t=e.getChannelData(r),a=Math.max(...t.map((e=>Math.abs(e))));a>n&&(n=a)}const r=n>0?.95/n:1;for(let n=0;n<t;n++){const t=e.getChannelData(n);for(let e=0;e<t.length;e++)t[e]*=r}return e},i=new Map,s=(e,t={})=>{let n=e;return t.reversed&&(n+="_reversed"),t.playbackSpeed&&1!==t.playbackSpeed&&(n+=`_speed_${t.playbackSpeed}`),n},l=(e,t,n)=>{console.error(`[URL Issue] URL "${e}" not found in Song: "${t}", Channel: "${n}". Check if the URL is correct or the resource is available.`)},d=songDataUrls.filter((e=>e.trim()&&!e.trim().startsWith("//")));if(d.length){window.pako||await async function(){try{const e=await fetch("/content/2109694f44c973892fb8152cf5c68607fb19288c045af1abc1716c1c3b4d69e6i0"),t=await e.text(),n=(new DOMParser).parseFromString(t,"text/html").querySelector("script");if(!n||!n.textContent.includes("pako"))throw new Error("Pako library not found.");document.head.append(Object.assign(document.createElement("script"),{textContent:n.textContent})),console.log("[Initialization] Pako library loaded successfully.")}catch(e){console.error("[Initialization] Error loading Pako:",e)}}();const p=(await Promise.all(d.map((async(e,t)=>{try{return{data:await a(e),index:t}}catch(t){return console.error(`[Initialization] Failed to fetch/process ${e}:`,t),null}}))).then((e=>{const t=e.filter(Boolean);if(!t.length)throw new Error("[Initialization] No valid data.");return t}))).sort(((e,t)=>e.index-t.index)).map((({data:e,index:t})=>{const{projectName:r="The Infinite Ordinal",artistName:a="melophonic",projectBPM:o=120,projectSequences:c={},channelURLs:i=[],channelVolume:s=[],channelPlaybackSpeed:d=[],trimSettings:p={}}=e,u=n.map(((e,n)=>{const a=Object.entries(c).reduce(((e,[t,r])=>{const a=r[`ch${n}`];return a&&e.push({sequenceName:t,steps:a.steps}),e}),[]),u={volume:s[n]??1,playbackSpeed:d[n]??1,trimStartTime_Percentage:p[n]?.start||0,trimEndTime_Percentage:p[n]?.end||100,requiresReversal:a.some((e=>e.steps.some((e=>"object"==typeof e&&e.reverse)))),channelSequence:a,originalBPM:o},h=i[n];return h||l("URL_not_found",`Song ${t+1}: ${r}`,`Channel ${e}`),{id:e,url:h||"URL_not_found",metadata:u}}));return{id:`Song ${t+1}: ${r}`,artist:a,bpm:o,totalSequences:Object.keys(c).length,totalChannels:u.length,channels:u,projectSequences:c}})),u=p.flatMap((e=>e.channels));window.keyNames=e,window.keyMap=t,window.channelIds=n,window.channelIdMap=r,window.fetchAndProcessSongData=a,window.setArtworkImage=o,window.normalizeAudioBuffer=c,window.MAX_CACHE_SIZE=100,window.sampleCache=i,window.generateSampleKey=s,window.logUrlIssue=l,window.validSongDataUrls=d,window.originalSongs=p,window.allChannels=u}document.dispatchEvent(new Event("dataReady"))})();
