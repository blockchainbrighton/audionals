// configureEffects.js
(()=>{window.EffectsModule=window.EffectsModule||{},window.EffectsModule.effectsConfig={pitchShift:{enabled:!0,defaultProbability:.5,shifts:[.125,.25,.5,.75,1,1.25,1.5,2,2.5,3,4,5]},harmonize:{enabled:!0,defaultProbability:.01,intervals:[.25,.5,.75,1,1.25,1.5,2,2.5,3,4,5],maxHarmonyChannels:4}},window.EffectsModule.getEffectParams=function(e,a,n,t){const o=this.effectsConfig[e];if(!o||!o.enabled)return null;if(t()>=o.defaultProbability)return null;const i={};switch(e){case"pitchShift":i.shift=o.shifts[Math.floor(t()*o.shifts.length)];break;case"harmonize":i.interval=o.intervals[Math.floor(t()*o.intervals.length)],i.maxHarmonyChannels=o.maxHarmonyChannels}return{...o,...i}};window.applyRandomPitchShift=(e,{shifts:a},n)=>{const t=a[Math.floor(n()*a.length)];e.metadata.playbackSpeed*=t,console.log(`[effectsDebug][PitchShift] Channel "${e.id}" playback speed shifted by factor ${t}`)},window.addHarmony=(e,a,n,{intervals:t,maxHarmonyChannels:o},i,d)=>{i.harmonyChannelsAdded>=o||t.forEach((t=>{if(i.harmonyChannelsAdded>=o)return;const d=JSON.parse(JSON.stringify(e));var f,s,l;d.id=`${e.id}_harmony_${a}_${t}`,d.metadata.playbackSpeed*=t,d.metadata.volume=(f=.5*(d.metadata.volume||1),s=1,Math.min(Math.max(f,s),l)),n.channels.push(d),i.harmonyChannelsAdded++,i.totalGain+=d.metadata.volume||1,console.log(`[effectsDebug][Harmony] Added harmony channel "${d.id}" with interval ${t}`)}))},window.waitForEffects=function(){return new Promise((e=>{window.EffectsModule&&window.EffectsModule.effectsConfig?e():document.addEventListener("effectsLoaded",e,{once:!0})}))},document.dispatchEvent(new Event("effectsLoaded"))})();
