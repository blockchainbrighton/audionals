// playback.js
(()=>{const e=window.globalData||(window.globalData={isPlaying:!1,currentSongIndex:0,songsArray:[],audioBuffers:{},reverseAudioBuffers:{},audioContext:new(window.AudioContext||window.webkitAudioContext),masterGain:null,gainNodes:{},isArtworkCover:!0,isVisualiserCover:!1,compressor:null,lowShelfFilter:null,analyser:null,isAudioProcessingInitialized:!1,currentSeed:1n});e.currentSequence=0;const{audioContext:n}=e,o=.1,t=25;let a={};const l=new Set,i=new Set;let r=null;function s(){const{songsArray:i,currentSongIndex:r}=window.globalData;if(window.globalData.isPlaybackStarting)console.warn("startPlayback called while playback is already starting. Ignoring duplicate call.");else{window.globalData.isPlaybackStarting=!0;try{if(!i.length)return console.error("No songs available for playback."),alert("No songs available for playback."),void(window.globalData.isPlaybackStarting=!1);const s=i[r%i.length],c=s.projectSequences||{},d=60/s.bpm/4,m=64*d;a={},l.clear(),console.log(`Starting playback for Song: ${s.id} (${r+1}/${i.length}) with ${Object.keys(c).length} sequences.`),console.log(`Song BPM: ${s.bpm}`);let y=0,p=1;for(const[e,n]of Object.entries(c))a[e]={sequenceNumber:p,nextStepIndex:0,nextStepTime:window.globalData.audioContext.currentTime+y,stepDuration:d,endTime:window.globalData.audioContext.currentTime+y+m,completed:!1,loggedStart:!1},y+=m,p++;window.globalData.currentSongId=s.id,function(){if(e.isAudioProcessingInitialized)return void console.log("[PlaybackEngine] Audio processing chain already initialized.");e.compressor||(e.compressor=n.createDynamicsCompressor(),e.compressor.threshold.setValueAtTime(-24,n.currentTime),e.compressor.knee.setValueAtTime(30,n.currentTime),e.compressor.ratio.setValueAtTime(12,n.currentTime),e.compressor.attack.setValueAtTime(.003,n.currentTime),e.compressor.release.setValueAtTime(.25,n.currentTime),console.log("[PlaybackEngine] Compressor node initialized."));e.masterGain||(e.masterGain=n.createGain(),e.masterGain.gain.setValueAtTime(1,n.currentTime),e.masterGain.connect(e.compressor),console.log("[PlaybackEngine] Master Gain node created and connected to Compressor."));if(!e.lowShelfFilter){e.lowShelfFilter=n.createBiquadFilter(),e.lowShelfFilter.type="lowshelf";const o=20,t=22e3,a=-40,l=40,i=Math.min(Math.max(50,o),t),r=Math.min(Math.max(-6,a),l);e.lowShelfFilter.frequency.setValueAtTime(i,n.currentTime),e.lowShelfFilter.gain.setValueAtTime(r,n.currentTime),e.compressor.connect(e.lowShelfFilter),console.log("[PlaybackEngine] Low-shelf filter initialized and connected to Compressor.")}e.analyser||(e.analyser=n.createAnalyser(),e.analyser.fftSize=2048,e.analyser.smoothingTimeConstant=.8,e.lowShelfFilter.connect(e.analyser),console.log("[PlaybackEngine] Analyser node initialized and connected to Low-Shelf Filter."),e.analyser.connect(n.destination),console.log("[PlaybackEngine] Analyser node connected to AudioContext destination."));e.isAudioProcessingInitialized=!0,console.log("[PlaybackEngine] Audio processing chain fully initialized."),function(){if(!e.analyser)return void console.error("[setupBassMonitoring] AnalyserNode is not available. Cannot set up bass monitoring.");function o(){!function(){if(!e.analyser)return void console.error("[monitorLowFrequencies] AnalyserNode is not initialized in globalData.analyser.");if(!e.lowShelfFilter)return void console.error("[monitorLowFrequencies] lowShelfFilter is not initialized in globalData.lowShelfFilter.");const o=e.analyser.frequencyBinCount,t=new Uint8Array(o);e.analyser.getByteFrequencyData(t);const a=250,l=n.sampleRate/2,i=Math.floor(a/l*o),r=t.slice(0,i);if(0===r.length)return;const s=r.reduce(((e,n)=>e+n),0)/r.length,c=100;if(s>c){const o=e.lowShelfFilter.gain.value-.5;e.lowShelfFilter.gain.setValueAtTime(o,n.currentTime)}else if(s<c-20){const o=e.lowShelfFilter.gain.value+.5;e.lowShelfFilter.gain.setValueAtTime(o,n.currentTime)}}(),requestAnimationFrame(o)}o(),console.log("[setupBassMonitoring] Bass monitoring loop initiated using requestAnimationFrame.")}()}(),GainNodeHelper.createGainNodesForSong(s),GainNodeHelper.prepareNextSongGainNodes(i[(r+1)%i.length]),window.globalData.isPlaying=!0,window.globalData.currentSequence=1,window.globalData.playbackInterval&&(clearInterval(window.globalData.playbackInterval),window.globalData.playbackInterval=null,console.log("Existing playbackInterval cleared.")),window.globalData.hasCompletedSequences=!1,window.globalData.hasProceededToNextSong=!1,window.globalData.playbackInterval=setInterval((()=>function(t){if(!e.isPlaying)return;if(e.hasCompletedSequences)return;const l=n.currentTime;let i=!0;const r=Object.keys(t.projectSequences).length;if(0===r)return e.hasCompletedSequences=!0,void u();for(const[n,r]of Object.entries(t.projectSequences||{})){const s=a[n];if(s&&!s.completed)if(l>=s.endTime)s.completed=!0,console.log(`Sequence ${s.sequenceNumber} has completed.`);else for(i=!1,l>=s.nextStepTime&&!s.loggedStart&&(e.currentSequence=s.sequenceNumber,s.loggedStart=!0);s.nextStepTime<l+o&&e.isPlaying;){const{nextStepIndex:e,nextStepTime:n,stepDuration:o}=s;0!==e||s.loggedStart||(console.log(`Starting Sequence ${s.sequenceNumber} at step ${e}.`),s.loggedStart=!0);for(const[o,a]of Object.entries(r)){const l=parseInt(o.slice(2),10),i=t.channels[l];if(!i)continue;const r=a.steps?.find((n=>"number"==typeof n?n===e:n.index===e));if(void 0!==r){g(t,i,n,"object"==typeof r&&r.reverse)}}if(s.nextStepIndex++,s.nextStepIndex>=64){s.completed=!0,console.log(`Sequence ${s.sequenceNumber} has completed all steps.`);break}s.nextStepTime+=o}}i&&(console.log("All sequences have completed."),e.hasCompletedSequences=!0,u())}(s)),t),console.log("Sequences scheduled and playback started."),document.dispatchEvent(new CustomEvent("playbackStarted",{detail:{success:!0}})),w(s);const b=document.getElementById("playButton");b?(b.classList.remove("paused"),b.classList.add("playing"),b.textContent="Stop"):console.warn("Play button not found.")}catch(e){console.error("Error during startPlayback:",e),alert("An error occurred while starting playback.")}finally{window.globalData.isPlaybackStarting=!1}}}function c(){if(!window.globalData.isPlaying)return void console.log("Playback is not in progress.");d(),console.log("Playback stopped.");const e=document.getElementById("playButton");e?(e.classList.remove("playing"),e.classList.add("paused"),e.textContent="Play"):console.warn("Play button not found."),document.dispatchEvent(new CustomEvent("playbackStopped",{detail:{success:!0}})),function(){const e=document.getElementById("nowPlayingContainer");if(!e)return;e.querySelector(".songTitle").textContent="No song playing",e.querySelector(".artistName").textContent="",e.querySelector(".songBPM").textContent="BPM: N/A",e.querySelector(".timeLeft").textContent="Time Left: N/A"}(),window.countdownInterval&&(clearInterval(window.countdownInterval),window.countdownInterval=null,console.log("Countdown timer cleared.")),window.globalData.lowShelfFilter&&(window.globalData.compressor.disconnect(window.globalData.lowShelfFilter),window.globalData.lowShelfFilter.disconnect(window.globalData.analyser),window.globalData.analyser.disconnect(window.audioContext.destination),console.log("[PlaybackEngine] Disconnected audio nodes."))}function d(e={}){window.globalData.playbackInterval&&(clearInterval(window.globalData.playbackInterval),window.globalData.playbackInterval=null,console.log("Playback interval cleared in resetPlayback.")),window.globalData.isPlaying=!1,a={},l.clear(),window.activeAudioSources&&window.activeAudioSources.size>0&&(window.activeAudioSources.forEach((e=>{try{e.stop(),e.disconnect(),console.log(`[PlaybackEngine] Stopped and disconnected audio source: ${e.id||"unknown"}`)}catch(e){console.error("[PlaybackEngine] Error stopping and disconnecting audio source:",e)}})),window.activeAudioSources.clear()),window.globalData.currentSongId&&(GainNodeHelper.cleanupGainNodesForSong(window.globalData.currentSongId),console.log("[PlaybackEngine] Cleaned up gain nodes for current song."),window.globalData.currentSongId=null),window.countdownInterval&&(clearInterval(window.countdownInterval),window.countdownInterval=null,console.log("Countdown timer cleared in resetPlayback.")),e.callback&&e.callback()}function g(o,t,a,r){const s=e.getLoopSampleInfo(t.id);if(s&&s.bpm!==o.bpm)return void console.log(`Skipping loop sample with ID ${t.id} due to BPM mismatch (Loop BPM: ${s.bpm}, Song BPM: ${o.bpm})`);const c=`${o.id}_${t.id}_${r?"reverse":"normal"}`,d=r?e.reverseAudioBuffers[o.id]?.[t.id]:e.audioBuffers[o.id]?.[t.id];if(!d)return void(l.has(c)||l.add(c));const g=n.createBufferSource();g.buffer=d,g.playbackRate.value=t.metadata.playbackSpeed||1;const u=n.createGain();u.gain.setValueAtTime(0,a),g.connect(u);const w=e.gainNodes?.[o.id]?.[t.id]||e.masterGain;u.connect(w);u.gain.linearRampToValueAtTime(t.metadata.volume||1,a+.01);const m=a+d.duration/g.playbackRate.value,y=m-.01;u.gain.setValueAtTime(t.metadata.volume||1,y),u.gain.linearRampToValueAtTime(0,m),g.start(a),g.stop(m),i.add(g),g.onended=()=>i.delete(g)}function u(){if(e.isPlaying)if(e.hasProceededToNextSong)console.log("Already proceeded to the next song. Exiting proceedToNextSong.");else{e.hasProceededToNextSong=!0,console.log("Initiating proceedToNextSong.");try{const n=e.currentSeed;e.currentSeed=(void 0!==e.currentSeed?BigInt(e.currentSeed):1n)+1n,console.log(`Seed incremented from ${n} to ${e.currentSeed}.`);const o=e.currentSongIndex;e.currentSongIndex=(e.currentSongIndex+1)%e.songsArray.length,console.log(`Song index updated from ${o} to ${e.currentSongIndex}.`),setTimeout((()=>{if(console.log("Timeout reached. Attempting to proceed to the next song."),e.isPlaying){const n=e.songsArray[e.currentSongIndex];if(n){const o=n.seed;n.seed=e.currentSeed.toString(),console.log(`Seed for next song updated from ${o} to ${n.seed}.`),d({callback:()=>{console.log("Resetting playback and starting next song."),s(),document.dispatchEvent(new CustomEvent("songChanged",{detail:{song:n}})),console.log(`'songChanged' event dispatched for song: ${n.id}.`)}})}else console.error(`Next song not found at index ${e.currentSongIndex}.`)}}),200)}catch(e){console.error(`Error in proceedToNextSong - ${e}`)}finally{console.log("Finished processing next song.")}}else e.hasLoggedPlaybackNotActive||(console.log("Playback is not active. Cannot proceed to next song."),e.hasLoggedPlaybackNotActive=!0)}function w(n){const o=document.getElementById("nowPlayingContainer");if(!o)return;const{projectName:t,artistName:a}=function(e){return{projectName:e.projectName||e.id||"Unknown Project",artistName:e.artist||"Unknown Artist"}}(n);o.querySelector(".songTitle").textContent=t,o.querySelector(".artistName").textContent=a,o.querySelector(".songBPM").textContent=`BPM: ${n.bpm}`,displaySeedAndBPM(n.seed,n.bpm,n.id),function(n){r&&clearInterval(r);const o=document.getElementById("nowPlayingContainer");if(!o)return;const t=o.querySelector(".timeLeft");if(!t)return;const a=60/n.bpm/4,l=64,i=Object.keys(n.projectSequences).length;let s=a*l*i;m(t,s),r=setInterval((()=>{e.isPlaying?(s-=1,s<=0&&(s=0,clearInterval(r)),m(t,s)):clearInterval(r)}),1e3)}(n)}function m(e,n){const o=Math.floor(n/60),t=Math.floor(n%60);e.textContent=`Time Left: ${o}:${t.toString().padStart(2,"0")}`}window.globalData.togglePlayback=()=>{window.globalData.isPlaying?c():s()},window.globalData.startPlayback=s,window.globalData.stopPlayback=c,window.globalData.resetPlayback=()=>d({callback:s}),e.seedListLogged||(console.log("[DEBUGplayback] The initial seedList is: ",e.seedList),e.seedListLogged=!0),e.initializePlaybackEngine=()=>{e.songsArray.length},document.addEventListener("initialAudioBuffersReady",(n=>{n.detail.success&&(e.initializePlaybackEngine(),console.log("Initial audio buffers are ready."))})),["playbackStarted","playbackStopped"].forEach((e=>{document.addEventListener(e,(n=>{n.detail.success&&console.log(`Playback has been successfully ${"playbackStarted"===e?"started":"stopped"}.`)}))})),document.addEventListener("DOMContentLoaded",(()=>{const n=document.getElementById("artworkCover"),o=document.getElementById("artworkImage"),t=document.getElementById("loadingSpinner");if(e.isArtworkCover&&e.songsArray.length){const a=e.songsArray[0].artworkUrl||[];a.length&&(o.src=a[0],n.classList.remove("hidden"),t.style.display="none",o.addEventListener("click",e.togglePlayback))}})),Object.keys(e.audioBuffers).length&&e.initializePlaybackEngine(),document.addEventListener("songChanged",(e=>{const{song:n}=e.detail;n&&(w(n),console.log(`Now Playing: ${n.projectName} by ${n.artistName}`))})),document.addEventListener("DOMContentLoaded",(()=>{if(window.globalData.isPlaying&&window.globalData.songsArray.length){w(window.globalData.songsArray[window.globalData.currentSongIndex])}}))})();
