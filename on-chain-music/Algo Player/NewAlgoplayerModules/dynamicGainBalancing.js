// DynamicGainBalancing.js
const DynamicGainBalancer=(()=>{const n=window.globalData||(window.globalData={normalizationFactors:{},balancerGainNodes:{}}),{normalizationFactors:o,balancerGainNodes:a,audioContext:e,masterGain:t}=n,r=(n,a,e)=>{o[n]=o[n]??{},o[n][a]=e,console.log(`Stored normalization factor for Song ID: ${n}, Channel ID: ${a}: ${e}`)},c=({id:n,channels:r})=>{r.length?r.forEach((({id:r})=>((n,r)=>{const c=o[n]?.[r];if(c&&1!==c){const o=1/c,l=e.createGain();l.gain.value=o,l.connect(t),a[n]=a[n]??{},a[n][r]=l,console.log(`Applied inverse gain for Song ID: ${n}, Channel ID: ${r}, Gain: ${o}`)}})(n,r))):console.warn(`No channels found for song ${n}.`)},l=n=>{const o=a[n];o?(Object.values(o).forEach((n=>{n.disconnect()})),console.log(`Cleaned up balancer gain nodes for Song ID: ${n}`),delete a[n]):console.warn(`No balancer gain nodes found to clean up for song ${n}.`)};return document.addEventListener("audioBufferNormalized",(({detail:{songId:n,channelId:o,normalizationFactor:a}})=>{r(n,o,a)})),document.addEventListener("songPlaybackStarted",(({detail:{currentSong:n}})=>{c(n)})),document.addEventListener("songPlaybackEnded",(({detail:{songId:n}})=>{l(n)})),{storeNormalizationFactor:r,createBalancerGainNodesForSong:c,cleanupBalancerGainNodesForSong:l}})();
