// playButton.js
// This script runs inside the generated HTML file when no image is provided.

function createStandalonePlayButton(audioBase64Data, metadata) {
    const appContainer = document.getElementById('app');
    if (!appContainer) {
        console.error('Player init error: #app container not found for standalone play button.');
        return;
    }

    // Clear any existing content in #app that might have been added by main.js (e.g. metadata display)
    // We want our button to be the primary interface here.
    // The metadata div is already created by OB1_Template2.js if needed.
    // So, we only add the button if #app doesn't already have a complex player.
    // Let's assume if playButton.js is included, #app expects to be primarily controlled by it.
    // We'll keep the metadata div that was generated by OB1_Template2.js
    const existingMetadataDiv = appContainer.querySelector('.audio-metadata');
    appContainer.innerHTML = ''; // Clear #app
    if (existingMetadataDiv) {
        appContainer.appendChild(existingMetadataDiv); // Re-add metadata if it was there
    }


    const audioSrc = `data:audio/opus;base64,${audioBase64Data}`;
    const audio = new Audio(); // Create audio element programmatically

    const button = document.createElement('button');
    button.id = 'programmaticPlayButton';
    button.textContent = '▶️ Play Audio';
    // Basic styling (can be enhanced via style.css in the generated HTML's context)
    button.style.padding = '20px 30px';
    button.style.fontSize = '2em';
    button.style.fontWeight = 'bold';
    button.style.cursor = 'pointer';
    button.style.border = '2px solid #333';
    button.style.borderRadius = '10px';
    button.style.backgroundColor = '#f0f0f0';
    button.style.color = '#333';
    button.style.display = 'block';
    button.style.margin = '50px auto'; // Center it a bit

    let hasPlayedOnce = false;

    button.onclick = () => {
        if (!hasPlayedOnce) {
            audio.src = audioSrc; // Set src only on first interaction to allow autoplay policies
            hasPlayedOnce = true;
        }
        if (audio.paused) {
            audio.play().catch(e => console.error("Error playing audio:", e));
        } else {
            audio.pause();
        }
    };

    audio.onplay = () => {
        button.textContent = '⏸️ Pause';
        button.style.backgroundColor = '#e0e0e0';
    };
    audio.onpause = () => {
        button.textContent = '▶️ Play Audio';
        button.style.backgroundColor = '#f0f0f0';
    };
    audio.onended = () => {
        button.textContent = '▶️ Play Audio (Ended)';
        button.style.backgroundColor = '#f0f0f0';
        audio.currentTime = 0; // Reset for replaying
    };
    audio.onerror = (e) => {
        console.error('Audio playback error:', e);
        button.textContent = '⚠️ Error';
        button.disabled = true;
    };

    appContainer.appendChild(button);

    // Log metadata for debugging or if you want to display it differently
    // console.log('Standalone player metadata:', metadata);
}

// --- Script Execution ---
// Check if audioBase64_Opus global variable exists (set by the generated HTML)
// and if imageBase64 is effectively missing (indicating this button should be used).
if (typeof audioBase64_Opus !== 'undefined' && (typeof imageBase64 === 'undefined' || imageBase64.trim() === '')) {
    document.addEventListener('DOMContentLoaded', () => {
        // Retrieve metadata directly if needed (it's already in the HTML)
        const instrument = document.getElementById('audio-meta-instrument')?.textContent;
        const note = document.getElementById('audio-meta-note')?.textContent;
        const frequency = document.getElementById('audio-meta-frequency')?.textContent;
        const metadata = { instrument, note, frequency };

        createStandalonePlayButton(audioBase64_Opus, metadata);
    });
} else if (typeof audioBase64_Opus === 'undefined') {
    console.error('Standalone Play Button: audioBase64_Opus data not found.');
}