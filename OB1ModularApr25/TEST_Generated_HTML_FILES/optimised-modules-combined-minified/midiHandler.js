// --- midiHandler.js ---
const NOTE_ON=144,NOTE_OFF=128,state={access:null,input:null,callbacks:{},autoConnect:!0},log=console.log.bind(console),warn=console.warn.bind(console),error=console.error.bind(console),notify=()=>{const e=Array.from(state.access?.inputs.values()||[]).filter((e=>["open","connected"].includes(e.connection)||"connected"===e.state)).map((({id:e,name:t})=>({id:e,name:t}))),t=state.input?.id||null,n=state.access?"ready":"unavailable",s=e.length?t?`Selected: ${state.input.name}`:"MIDI devices available.":state.access?"MIDI ready, no inputs found.":"MIDI access unavailable.";state.callbacks.stateChange?.({status:n,message:s,devices:e,selectedDeviceId:t})},tryAuto=()=>{if(state.autoConnect&&state.access&&!state.input){const e=state.access.inputs.values().next().value;if(e)return log(`Auto-connecting to ${e.name}`),selectDevice(e.id),!0;warn("Auto-connect: no devices to connect.")}return!1},onStateChange=({port:e})=>{if(!state.access)return;log(`State change: ${e.name} (${e.type}) -> ${e.state}`);const t="input"===e.type;state.input?.id===e.id&&"disconnected"===e.state?(log(`Device disconnected: ${state.input.name}`),selectDevice(null),tryAuto()):t&&"connected"===e.state&&state.autoConnect&&!state.input&&(log(`New device connected: ${e.name}. Auto-connecting.`),selectDevice(e.id)),notify()},onMidiMessage=({data:e})=>{if(!e||e.length<3)return;const[t,n,s]=e,a=240&t;144===a&&s>0?state.callbacks.noteOn?.(n,s):(144===a&&0===s||128===a)&&state.callbacks.noteOff?.(n,s)};export function init(e,t,n,{autoConnect:s=!0}={}){state.callbacks={noteOn:e,noteOff:t,stateChange:n},state.autoConnect=s,log("Auto-connect "+(s?"enabled":"disabled")),state.input&&(state.input.onmidimessage=null),state.input=null,state.access=null,navigator.requestMIDIAccess?(log("Requesting MIDI access..."),navigator.requestMIDIAccess({sysex:!1}).then((e=>{log("MIDI access granted."),state.access=e,e.onstatechange=onStateChange,notify(),tryAuto()})).catch((e=>{error("MIDI access failed:",e),state.callbacks.stateChange?.({status:"error",message:`Failed to access MIDI: ${e.message}`,devices:[],selectedDeviceId:null})}))):(warn("Web MIDI API not supported."),state.callbacks.stateChange?.({status:"unsupported",message:"Web MIDI API not supported in this browser.",devices:[],selectedDeviceId:null}))}export function selectDevice(e){if(!state.access)return error("Cannot select device, MIDI access unavailable.");if(state.input&&state.input.id!==e&&(state.input.onmidimessage=null,state.input=null),!e)return log("Device deselected."),notify();const t=state.access.inputs.get(e);!t||"open"!==t.connection&&"connected"!==t.state?error(`Failed to select device: ${e}`):(state.input=t,state.input.onmidimessage=onMidiMessage,log(`Selected device: ${t.name}`)),notify()}export function getSelectedDeviceId(){return state.input?.id||null}export function isAutoConnectEnabled(){return state.autoConnect}