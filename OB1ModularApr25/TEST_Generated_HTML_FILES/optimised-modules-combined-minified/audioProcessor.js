// --- audioProcessor.js — Combined audio processing + timing management module ---
import{showError,triggerAnimation}from"/content/4c9ce4ed23eb99654200e353b14643359bbdb69d9289187bd89da6bd0b31350di0";import{_isInputFocused,base64ToArrayBuffer}from"/content/8e485ab53465925b8a2cf7269ee5a691e0b17e13573c7e500d15b99204776936i0";const SMOOTH_PARAM_TIME=.01,A4_MIDI_NOTE=69,A4_FREQUENCY=440,SEMITONE_RATIO=2**(1/12),MIN_MIDI_NOTE=21,MAX_MIDI_NOTE=108;let audioContext,mainGainNode,decodedBuffer,reversedBuffer,originalSampleFrequency,currentLoopingSource,isReversed=!1,currentTempo=78,currentGlobalPitch=1,currentVolume=1,sampleType="one-shot",midiNoteToPlaybackRate=new Map;const timingManager=(()=>{const e=25,t=.1,o=.05;let n=null,r=120,i=1,a=!1,u=null,c=1,s=null,l=0,p=0;const d=(e,t)=>e>0&&t>0?60/e/t:0;function f(){if(!a||!n)return;const o=n.currentTime+t,i=d(r,c);if(i<=0)return console.error("Invalid sub‑beat duration. Stopping loop."),void x();for(;;){const e=l+p*i;if(e>=o)break;if("function"!=typeof s)return console.error("playCallback missing. Stopping loop."),void x();s(e),p++}u=setTimeout(f,e)}function g(e=!0){u&&clearTimeout(u),u=null,e&&(l=p=0)}function m(e){!a&&n?"function"==typeof e?(a=!0,s=e,l=n.currentTime+o,p=0,f()):console.error("startLoop requires a callback"):console.warn("Loop already active or audio context unavailable.")}function x(){a&&(a=!1,s=null,g(!0))}return{init:function(e,t,o){if(!(e instanceof AudioContext))throw new Error("Invalid AudioContext supplied to timingManager.init");n=e,r=t,i=o,c=1,a=!1,s=null,g(!0)},startLoop:m,stopLoop:x,setTempo:function(e){if((e=+e)<=0||Number.isNaN(e))return console.warn("Invalid tempo",e);const t=r;if(r=e,a&&t!==e){const e=s,t=c;x(),c=t,m(e)}},setPitch:function(e){e>0?i=e:console.warn("Invalid pitch",e)},setScheduleMultiplier:function(e){const t=parseInt(e,10);if(!Number.isInteger(t)||t<1)return console.warn("Invalid schedule multiplier",e);if(c!==t&&(c=t,a&&n&&r>0)){const e=n.currentTime,t=Math.max(0,e-l),o=d(r,c);o>0&&(p=Math.floor(t/o))}},getCurrentScheduleMultiplier:()=>c,getLoopStartTime:()=>l,getLoopingState:()=>a,getCurrentTempo:()=>r,getCurrentPitch:()=>i}})();async function _ensureContext(){if(!audioContext)return showError("Audio system not ready."),!1;if("suspended"===audioContext.state)try{await audioContext.resume()}catch(e){throw showError("Could not resume audio context."),e}return!0}function _selectBuffer(){const e=isReversed?reversedBuffer:decodedBuffer;return e||showError(`Cannot play: ${isReversed?"Reversed":"Original"} buffer unavailable.`),e}function _play(e,t,o,n=!1,r=!1){if(!e)return null;try{const i=audioContext.createBufferSource();return i.buffer=e,i.playbackRate.value=o,n&&!r&&(i.loop=!0),i.connect(mainGainNode),triggerAnimation(),i.start(t),n&&i.addEventListener("ended",(()=>currentLoopingSource===i&&(currentLoopingSource=null))),i}catch(e){return showError("Failed to play audio."),console.error(e),null}}function _reverse(e){if(!e)return null;const{numberOfChannels:t,length:o,sampleRate:n}=e,r=audioContext.createBuffer(t,o,n);for(let n=0;n<t;n++){const t=e.getChannelData(n),i=r.getChannelData(n);for(let e=0,n=o-1;e<o;e++,n--)i[e]=t[n]}return r}function _setupContext(){try{const e=window.AudioContext||window.webkitAudioContext;if(!e)throw"No AudioContext available";audioContext=new e,mainGainNode=audioContext.createGain(),mainGainNode.gain.setValueAtTime(currentVolume,audioContext.currentTime),mainGainNode.connect(audioContext.destination)}catch(e){throw showError(`Audio Setup Error: ${e}`),audioContext=mainGainNode=null,e}}async function _decodeAndPrepare(e){decodedBuffer=await audioContext.decodeAudioData(base64ToArrayBuffer(e)),reversedBuffer=_reverse(decodedBuffer);const t=parseFloat(document.getElementById("audio-meta-frequency")?.textContent||"");if(!t)throw showError("Missing base frequency."),new Error("Base frequency missing");originalSampleFrequency=t;const o=document.getElementById("audio-meta-sample-type")?.textContent.trim().toLowerCase();sampleType="loop"===o?"loop":"one-shot",midiNoteToPlaybackRate=new Map(Array.from({length:MAX_MIDI_NOTE-MIN_MIDI_NOTE+1},((e,t)=>{const o=MIN_MIDI_NOTE+t;return[o,A4_FREQUENCY*SEMITONE_RATIO**(o-A4_MIDI_NOTE)/originalSampleFrequency]})))}export async function init(e,t=78,o=1){return currentTempo=t>0?t:78,currentGlobalPitch=o>0?o:1,[audioContext,mainGainNode,decodedBuffer,reversedBuffer]=[null,null,null,null],midiNoteToPlaybackRate.clear(),isReversed=!1,_setupContext(),await _decodeAndPrepare(e),timingManager.init(audioContext,currentTempo,currentGlobalPitch),!0}export async function playOnce(){await _ensureContext()&&_play(_selectBuffer(),audioContext.currentTime,currentGlobalPitch,!1,!0)}export async function startLoop(){if(!timingManager.getLoopingState()&&await _ensureContext()&&_selectBuffer())if(currentLoopingSource?.stop(),currentLoopingSource=null,"one-shot"===sampleType)timingManager.startLoop((e=>_play(_selectBuffer(),e,currentGlobalPitch,!1,!0)));else{timingManager.startLoop((()=>{}));const e=timingManager.getLoopStartTime()||audioContext.currentTime+.05;currentLoopingSource=_play(_selectBuffer(),e,currentGlobalPitch,!0,!1),currentLoopingSource||(showError("Failed to start looping audio."),stopLoop())}}export function stopLoop(){timingManager.stopLoop(),currentLoopingSource?.stop(),currentLoopingSource=null}export function setScheduleMultiplier(e){timingManager.setScheduleMultiplier(Math.max(1,parseInt(e,10)))}export const getScheduleMultiplier=()=>timingManager.getCurrentScheduleMultiplier();export function setTempo(e){if(e>0){const t=timingManager.getLoopingState(),o=currentTempo;currentTempo=e,timingManager.setTempo(e),t&&"loop"===sampleType&&e!==o&&(stopLoop(),startLoop())}}export function toggleReverse(){if(!isReversed&&!reversedBuffer)return isReversed;const e=timingManager.getLoopingState();return e&&"loop"===sampleType&&stopLoop(),isReversed=!isReversed,e&&startLoop(),isReversed}export function setGlobalPitch(e){e>0&&(currentGlobalPitch=e,timingManager.setPitch(e))}export function setVolume(e){e>=0&&(currentVolume=e,mainGainNode?.gain.setTargetAtTime(e,audioContext.currentTime,.01))}export const getLoopingState=()=>timingManager.getLoopingState();export const getReverseState=()=>isReversed;export const getAudioContextState=()=>audioContext?.state||"unavailable";export const resumeContext=_ensureContext;export const getPlaybackRateForNote=e=>midiNoteToPlaybackRate.get(e);export async function playSampleAtRate(e){e>0&&await _ensureContext()&&_play(_selectBuffer(),audioContext.currentTime,e,!1,!0)}export const getLoopStartTime=()=>timingManager.getLoopStartTime();export const getCurrentTempo=()=>timingManager.getCurrentTempo();export const getCurrentPitch=()=>timingManager.getCurrentPitch();