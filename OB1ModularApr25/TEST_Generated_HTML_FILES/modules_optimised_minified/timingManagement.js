// --- timingManagement.js ---
const SCHEDULER_INTERVAL_MS=25,SCHEDULE_AHEAD_TIME_S=.1,LOOP_START_DELAY_S=.05;let currentTempo,currentPitch,audioContext=null,isLooping=!1,schedulerTimeoutId=null,scheduleMultiplier=1,playCallback=null,loopStartTime=0,scheduledSubBeatCounter=0;const _calculateSubBeatDuration=(e,o)=>e>0&&o>0?60/e/o:0;function _scheduleLoopIterations(){if(!isLooping||!audioContext)return;const e=audioContext.currentTime+SCHEDULE_AHEAD_TIME_S,o=_calculateSubBeatDuration(currentTempo,scheduleMultiplier);if(o<=0)return console.error("TimingManager: Invalid subBeatDuration (<= 0). Stopping loop."),stopLoop();for(;loopStartTime+scheduledSubBeatCounter*o<e;){const e=loopStartTime+scheduledSubBeatCounter*o;if("function"!=typeof playCallback)return console.error("TimingManager: playCallback is missing or invalid. Stopping."),stopLoop();playCallback(e),scheduledSubBeatCounter++}schedulerTimeoutId=setTimeout(_scheduleLoopIterations,SCHEDULER_INTERVAL_MS)}export function getCurrentScheduleMultiplier(){return scheduleMultiplier}export function setScheduleMultiplier(e){const o=parseInt(e,10);if(!Number.isInteger(o)||o<1)return console.warn(`TimingManager: Invalid multiplier: ${e}. Must be an integer >= 1.`);if(scheduleMultiplier!==o&&(console.log(`TimingManager: Updating multiplier from ${scheduleMultiplier} to ${o}.`),scheduleMultiplier=o,isLooping&&audioContext&&currentTempo>0)){const e=Math.max(0,audioContext.currentTime-loopStartTime),o=_calculateSubBeatDuration(currentTempo,scheduleMultiplier);if(o>0){const t=Math.floor(e/o);console.log(`  - Time: ${audioContext.currentTime.toFixed(4)}, Start: ${loopStartTime.toFixed(4)}, Elapsed: ${e.toFixed(4)}, New Duration: ${o.toFixed(4)}, Old Counter: ${scheduledSubBeatCounter}, Expected: ${t}`),scheduledSubBeatCounter=t,console.log(`  - Counter adjusted to: ${scheduledSubBeatCounter}`)}else console.warn("TimingManager: Cannot adjust counter; invalid new sub-beat duration.")}}function _stopLoopInternal(e=!0){schedulerTimeoutId&&clearTimeout(schedulerTimeoutId),schedulerTimeoutId=null,e&&(loopStartTime=0,scheduledSubBeatCounter=0)}export function init(e,o,t){if(!(e instanceof AudioContext))throw new Error("TimingManager Init: Invalid AudioContext provided.");audioContext=e,currentTempo=o,currentPitch=t,isLooping=!1,playCallback=null,scheduleMultiplier=1,_stopLoopInternal(!0),console.log(`TimingManager initialized. Tempo: ${currentTempo}, Pitch: ${currentPitch}, Multiplier: ${scheduleMultiplier}`)}export function startLoop(e){return isLooping||!audioContext?console.warn("TimingManager: Loop already active or audio context unavailable."):"function"!=typeof e?console.error("TimingManager: startLoop requires a valid soundPlaybackCallback."):("suspended"===audioContext.state&&console.warn("TimingManager: AudioContext is suspended. Loop start might be delayed."),isLooping=!0,playCallback=e,loopStartTime=audioContext.currentTime+LOOP_START_DELAY_S,scheduledSubBeatCounter=0,console.log(`TimingManager: Loop starting at ${loopStartTime.toFixed(4)}; Sub-beat count: ${scheduledSubBeatCounter}; Multiplier: ${scheduleMultiplier}`),void _scheduleLoopIterations())}export function stopLoop(){isLooping&&(console.log("TimingManager: Stopping loop."),isLooping=!1,playCallback=null,_stopLoopInternal(!0))}export function setTempo(e){if("number"!=typeof e||e<=0)return console.warn(`TimingManager: Invalid tempo value: ${e}`);const o=currentTempo;if(currentTempo=e,isLooping&&e!==o){console.log(`TimingManager: Tempo changed to ${e}. Restarting loop for phase accuracy.`);const o=playCallback,t=scheduleMultiplier;_stopLoopInternal(!1),isLooping=!1,playCallback=null,o?(loopStartTime=audioContext.currentTime+LOOP_START_DELAY_S,scheduledSubBeatCounter=0,scheduleMultiplier=t,console.log(`TimingManager: Restarting loop with new tempo ${e}. Start time: ${loopStartTime.toFixed(4)}, Multiplier: ${scheduleMultiplier}`),startLoop(o)):(console.error("TimingManager: Cannot restart loop after tempo change - callback missing."),_stopLoopInternal(!0))}}export function setPitch(e){"number"==typeof e&&e>0?currentPitch=e:console.warn(`TimingManager: Invalid pitch value: ${e}`)}export const getLoopingState=()=>isLooping;export const getCurrentTempo=()=>currentTempo;export const getCurrentPitch=()=>currentPitch;