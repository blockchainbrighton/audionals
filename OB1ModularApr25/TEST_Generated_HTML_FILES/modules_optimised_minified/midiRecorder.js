// midiRecorder.js
import{createElement}from"/content/6ee146a17e6582c989ebaa2f2c8b6a039f29493f858d59a89edfb0d3485a7fc4i0";let recordButton,playButton,stopButton,saveButton,loadButton,statusIndicator,audioProcRef=null,isArmedForRecording=!1,isRecording=!1,isPlaying=!1,recordedEvents=[],recordingStartTime=0,playbackTimeoutIds=[],uiPanel=null,isUIVisible=!1;const FORMAT_VERSION="1.0",PANEL_ID="midi-recorder-panel",panelStyle="\n    position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%);\n    background-color: rgba(40, 40, 40, 0.9); border: 1px solid #555; border-radius: 5px;\n    padding: 10px 15px; z-index: 1000; display: flex; flex-direction: column;\n    align-items: center; gap: 8px; visibility: hidden; opacity: 0;\n    transition: visibility 0s 0.2s, opacity 0.2s ease-in-out; color: #ccc; font-size: 0.9em;\n",buttonRowStyle="display: flex; gap: 10px; width: 100%; justify-content: center;",buttonStyle="padding: 5px 10px; cursor: pointer; min-width: 70px; text-align: center;\n    background-color: #333; border: 1px solid #555; color: #ddd; border-radius: 3px;",statusStyle="min-height: 1.2em; font-style: italic; color: #aaa; text-align: center; width: 100%;",_createUIPanel=()=>{uiPanel=createElement("div",{id:PANEL_ID,style:panelStyle}),statusIndicator=createElement("span",{style:statusStyle,textContent:"Idle"});const e=createElement("div",{style:buttonRowStyle});recordButton=createElement("button",{style:buttonStyle,textContent:"Record"}),playButton=createElement("button",{style:buttonStyle,textContent:"Play"}),stopButton=createElement("button",{style:buttonStyle,textContent:"Stop",disabled:!0}),saveButton=createElement("button",{style:buttonStyle,textContent:"Save"}),loadButton=createElement("button",{style:buttonStyle,textContent:"Load"}),recordButton.addEventListener("click",(()=>{isArmedForRecording||isRecording?stopRecording():armRecording()})),playButton.addEventListener("click",(()=>{!isPlaying&&startPlayback(),_updateUIState()})),stopButton.addEventListener("click",(()=>{isArmedForRecording&&cancelArming(),isRecording&&stopRecording(),isPlaying&&stopPlayback()})),saveButton.addEventListener("click",saveRecording),loadButton.addEventListener("click",loadRecording),e.append(recordButton,playButton,stopButton,saveButton,loadButton),uiPanel.append(statusIndicator,e),document.body.appendChild(uiPanel),_updateUIState()},_updateUIState=()=>{if(!uiPanel)return;let e="Idle",t="Record",o="",r=!1,n=recordedEvents.length>0,i=!0;isArmedForRecording?(e="Armed (Waiting for first note...)",t="Cancel Arm",o="#d08770",r=!0,n=!1,i=!1):isRecording?(e="Recording...",t="Stop",o="#bf616a",r=!0,n=!1,i=!1):isPlaying?(e="Playing...",r=!0,n=!1,i=!1):e=recordedEvents.length?`Ready (${recordedEvents.length} events)`:"Idle",statusIndicator.textContent=e,recordButton.textContent=t,recordButton.style.backgroundColor=o||"",recordButton.disabled=isPlaying,stopButton.disabled=!r,playButton.disabled=!n||isArmedForRecording||isRecording||isPlaying,saveButton.disabled=playButton.disabled,loadButton.disabled=!i||isArmedForRecording||isRecording||isPlaying},toggleUI=()=>{uiPanel||_createUIPanel(),isUIVisible=!isUIVisible,uiPanel.style.visibility=isUIVisible?"visible":"hidden",uiPanel.style.opacity=isUIVisible?"1":"0",uiPanel.style.transitionDelay=isUIVisible?"0s":"0s, 0.2s",console.log(`MIDI Recorder UI ${isUIVisible?"shown":"hidden"}.`)},armRecording=()=>{isArmedForRecording||isRecording||isPlaying||(isArmedForRecording=!0,isRecording=!1,recordedEvents=[],recordingStartTime=0,console.log("MIDI Recorder: Armed for recording. Waiting for first note..."),_updateUIState())},cancelArming=()=>{isArmedForRecording&&(isArmedForRecording=!1,console.log("MIDI Recorder: Recording arm cancelled."),_updateUIState())},stopRecording=()=>{if(!isRecording&&!isArmedForRecording)return;const e=isRecording,t=isArmedForRecording;if(isRecording=!1,isArmedForRecording=!1,e){const e=recordedEvents.length?recordedEvents[recordedEvents.length-1].time/1e3:0;console.log(`MIDI Recorder: Recording stopped. Recorded ${recordedEvents.length} events over ~${e.toFixed(2)}s.`)}else t&&console.log("MIDI Recorder: Recording arm cancelled via Stop button.");recordingStartTime=0,_updateUIState()};export const handleMidiEvent=(e,t,o,r)=>{if(isArmedForRecording||isRecording){if(isArmedForRecording&&"noteon"===e&&o>0)return isArmedForRecording=!1,isRecording=!0,recordingStartTime=r,console.log("MIDI Recorder: First note received. Recording active."),recordedEvents.push({type:e,time:0,note:t,velocity:o}),void _updateUIState();if(isRecording){const n=Math.max(0,r-recordingStartTime);recordedEvents.push({type:e,time:n,note:t,velocity:o})}}};const startPlayback=()=>{if(isPlaying||isRecording||isArmedForRecording||0===recordedEvents.length)return;if(!audioProcRef||"function"!=typeof audioProcRef.playSampleAtRate||"function"!=typeof audioProcRef.getPlaybackRateForNote)return void console.error("MIDI Recorder: Cannot play, invalid audioProcessor reference or methods.");stopPlayback(),isPlaying=!0,console.log(`MIDI Recorder: Starting playback of ${recordedEvents.length} events.`);let e=0;recordedEvents.forEach((t=>{const o=setTimeout((()=>{try{if("noteon"===t.type&&t.velocity>0){const e=audioProcRef.getPlaybackRateForNote(t.note);void 0!==e?audioProcRef.playSampleAtRate(e,t.velocity):console.warn(`MIDI Recorder Playback: No playback rate for note ${t.note}`)}playbackTimeoutIds=playbackTimeoutIds.filter((e=>e!==o)),e++,e===recordedEvents.length&&0===playbackTimeoutIds.length&&isPlaying&&(console.log("MIDI Recorder: Playback finished."),stopPlayback())}catch(e){console.error("MIDI Recorder: Error during playback:",e),isPlaying&&stopPlayback()}}),t.time);playbackTimeoutIds.push(o)})),_updateUIState()},stopPlayback=()=>{(isPlaying||0!==playbackTimeoutIds.length)&&(console.log("MIDI Recorder: Stopping playback."),isPlaying=!1,playbackTimeoutIds.forEach(clearTimeout),playbackTimeoutIds=[],_updateUIState())},saveRecording=()=>{if(!recordedEvents.length)return void alert("No MIDI data recorded to save.");if(isArmedForRecording||isRecording||isPlaying)return void alert("Cannot save while recording, armed, or playing.");const e={formatVersion:"1.0",events:recordedEvents},t=JSON.stringify(e,null,2),o=new Blob([t],{type:"application/json"}),r=URL.createObjectURL(o),n=createElement("a",{href:r,download:`midi_recording_${Date.now()}.json`});document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(r),console.log("MIDI Recorder: Recording saved to JSON.")},loadRecording=()=>{if(isArmedForRecording||isRecording||isPlaying)return void alert("Cannot load while recording, armed, or playing.");const e=createElement("input",{type:"file",accept:".json,application/json"});e.onchange=({target:{files:e}})=>{const t=e[0];if(!t)return;const o=new FileReader;o.onload=({target:{result:e}})=>{try{const o=JSON.parse(e);if(!o||"object"!=typeof o)throw new Error("Invalid file content: Not a JSON object.");if("1.0"!==o.formatVersion&&console.warn(`Warning: Loaded format version ${o.formatVersion} (expected 1.0).`),!Array.isArray(o.events))throw new Error("Invalid format: 'events' property missing or not an array.");if(o.events.length>0){const e=o.events[0].time||0;0!==e&&(console.warn(`MIDI Recorder: Normalizing events (first event time ${e}ms).`),o.events.forEach((t=>t.time=Math.max(0,t.time-e))))}recordedEvents=o.events,console.log(`MIDI Recorder: Loaded ${recordedEvents.length} events from ${t.name}.`),alert(`Loaded ${recordedEvents.length} events.`),_updateUIState()}catch(e){console.error("MIDI Recorder: Error loading file:",e),alert(`Error loading file: ${e.message}`),recordedEvents=[],_updateUIState()}},o.onerror=e=>{console.error("MIDI Recorder: Error reading file:",e),alert("Error reading file.")},o.readAsText(t)},e.click()};export const init=e=>{e&&"function"==typeof e.playSampleAtRate&&"function"==typeof e.getPlaybackRateForNote?(audioProcRef=e,_createUIPanel(),console.log("MIDI Recorder Initialized.")):console.error("MIDI Recorder Init Error: Invalid audioProcessor reference or missing required methods.")};export{toggleUI};