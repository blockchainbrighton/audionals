// midiHandler.js
let midiAccess=null,selectedInputDevice=null,onNoteOnCallback=null,onNoteOffCallback=null,onStateChangeCallback=null;const NOTE_ON=144,NOTE_OFF=128,_onSuccess=e=>{console.log("MIDI Handler: Successfully obtained MIDI access."),midiAccess=e,midiAccess.onstatechange=_onStateChange,_listInputsAndNotify()},_onFailure=e=>{console.error("MIDI Handler: Failed to get MIDI access.",e),onStateChangeCallback?.({status:"error",message:`Failed to access MIDI devices: ${e.message}`,devices:[]}),midiAccess=null},_onStateChange=({port:e})=>{console.log(`MIDI Handler: State change for ${e.type} device "${e.name}". State: ${e.state}, Connection: ${e.connection}`),selectedInputDevice?.id===e.id&&"disconnected"===e.state&&(console.log(`MIDI Handler: Selected device "${selectedInputDevice.name}" disconnected.`),selectedInputDevice.onmidimessage=null,selectedInputDevice=null),_listInputsAndNotify()},_listInputsAndNotify=()=>{if(!midiAccess)return console.warn("MIDI Handler: Cannot list inputs, MIDI access not available."),void onStateChangeCallback?.({status:"unavailable",message:"MIDI Access not granted or unavailable.",devices:[]});const e=Array.from(midiAccess.inputs.values()).map((e=>({id:e.id,name:e.name})));console.log(`MIDI Handler: Found ${e.length} MIDI input(s):`,e.map((e=>e.name))),onStateChangeCallback?.({status:"ready",message:e.length?"MIDI devices available.":"MIDI access ready, but no input devices found.",devices:e})},_handleMidiMessage=e=>{if(!e.data||e.data.length<3)return;const[n,s,t]=e.data,a=240&n;144===a?t>0?onNoteOnCallback?.(s,t):onNoteOffCallback?.(s,t):128===a&&onNoteOffCallback?.(s,t)};export const init=(e,n,s)=>{onNoteOnCallback=e,onNoteOffCallback=n,onStateChangeCallback=s,navigator.requestMIDIAccess?(console.log("MIDI Handler: Requesting MIDI access..."),navigator.requestMIDIAccess({sysex:!1}).then(_onSuccess,_onFailure)):(console.warn("MIDI Handler: Web MIDI API not supported in this browser."),onStateChangeCallback?.({status:"unsupported",message:"Web MIDI API is not supported in this browser.",devices:[]}))};export const selectDevice=e=>{if(!midiAccess)return void console.error("MIDI Handler: Cannot select device, MIDI access not available.");if(selectedInputDevice&&(console.log(`MIDI Handler: Deselecting previous device "${selectedInputDevice.name}" (id: ${selectedInputDevice.id}).`),selectedInputDevice.onmidimessage=null,selectedInputDevice=null),!e)return void console.log("MIDI Handler: No device selected (deselected).");const n=midiAccess.inputs.get(e);n?(selectedInputDevice=n,selectedInputDevice.onmidimessage=_handleMidiMessage,console.log(`MIDI Handler: Selected device "${selectedInputDevice.name}" (id: ${selectedInputDevice.id}). Listening for messages...`)):console.error(`MIDI Handler: Could not find MIDI input device with ID "${e}".`)};