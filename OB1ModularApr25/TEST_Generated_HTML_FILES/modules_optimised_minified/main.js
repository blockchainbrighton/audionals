// main.js
console.log("--- main.js evaluating ---");import*as audio from"/content/086f00286fa2c0afc4bf66b9853ccf5bcf0a5f79d517f7e7a0d62150459b50e1i0";import*as ui from"/content/943baf5a8d4569764b325ed48a2b269fafaa7429463ab69f6c6a9524974d0d92i0";import*as midiHandler from"/content/0f41339bffd53a3a48ce7d08c786e8764ac091afc21d8b640ef03aae0aeed3c9i0";import*as keyboardShortcuts from"/content/665bc1893dea0d8a83d029f120902c2b4fb242b582b44e6f14703c49ec4978f1i0";import{initReferencePanel}from"/content/0753fec2800a46bd1e06ad3f2bdd3d35a5febeb2976d607c64a8d9326ab74e5fi0";import{clamp,_isInputFocused,addListener,createElement}from"/content/6ee146a17e6582c989ebaa2f2c8b6a039f29493f858d59a89edfb0d3485a7fc4i0";import*as midiRecorder from"/content/e9c3f4bb40fdb85218c94964f1c92bc76293b1ac5bfb92d88ace78a807d9e445i0";const DEFAULTS={TEMPO:78,PITCH:1,VOLUME:1,MULTIPLIER:1},LIMITS={TEMPO:{min:1,max:400},PITCH:{min:.01,max:10},VOLUME:{min:0,max:1.5},MULTIPLIER:{min:1,max:8}},IMAGE_PREFIX_IF_BASE64="data:image/jpeg;base64,",AUDIO_PREFIX="data:audio/opus;base64,";let appContainer,mainImage,playOnceBtn,loopToggleBtn,reverseToggleBtn,tempoSlider,pitchSlider,volumeSlider,multiplierSlider,controlsContainer,infoToggleBtn,referencePanel,errorMessageDiv,midiDeviceSelect,midiStatusSpan,controlsColumn,referenceColumn,touchInfoBtn=null,touchMidiBtn=null;function findElements(){[appContainer,mainImage,playOnceBtn,loopToggleBtn,reverseToggleBtn,tempoSlider,pitchSlider,volumeSlider,multiplierSlider,controlsContainer,infoToggleBtn,referencePanel,errorMessageDiv,midiDeviceSelect,midiStatusSpan]=["app","main-image","play-once-btn","loop-toggle-btn","reverse-toggle-btn","tempo-slider","pitch-slider","volume-slider","multiplier-slider","controls-container","info-toggle-btn","reference-panel","error-message","midi-device-select","midi-status"].map((e=>document.getElementById(e))),controlsColumn=document.querySelector(".controls-column"),referenceColumn=document.querySelector(".reference-column");const e={appContainer:appContainer,controlsContainer:controlsContainer,errorMessageDiv:errorMessageDiv,mainImage:mainImage,controlsColumn:controlsColumn};for(const[o,i]of Object.entries(e))if(!i)return console.error(`CRITICAL Error: UI element "${o}" not found. Application cannot initialize correctly.`),(document.getElementById("app")||document.body).innerHTML=`<p style="color:red; padding:20px;">Fatal Error: Required UI element "${o}" missing.</p>`,!1;return referenceColumn||console.warn("Reference column element missing."),midiDeviceSelect&&midiStatusSpan||console.warn("MIDI UI elements missing."),tempoSlider&&pitchSlider&&volumeSlider&&multiplierSlider||console.warn("One or more sliders not found."),!0}const validateDataSourcePresence=(e,o)=>{if(!e||"string"!=typeof e||"string"==typeof e&&""===e.trim()||"string"==typeof e&&e.startsWith("/*"))throw new Error(`Required data variable "${o}" is missing or invalid (must be a non-empty string).`);return e},formatDataSource=(e,o,i)=>e.startsWith("http://")||e.startsWith("https://")?(console.log(`[formatDataSource] Using direct URL for ${i}.`),e):e.startsWith("data:")?(console.log(`[formatDataSource] Using existing Data URI for ${i}.`),e):o?(console.log(`[formatDataSource] Applying prefix to ${i}. Assuming base64 or similar.`),`${o}${e}`):(console.log(`[formatDataSource] No prefix needed or provided for ${i}. Using as is.`),e),handleSliderInput=(e,o,i,t=parseFloat)=>{const{value:n,min:l,max:r,id:a}=e.target;if(void 0!==n&&void 0!==l&&void 0!==r)try{const e=t(n),s=clamp(e,t(l),t(r));if(isNaN(s))throw new Error("Parsed value is NaN");"function"==typeof o?o(s):console.error(`Invalid audioSetter for slider #${a}`),"function"==typeof i?i(s):console.error(`Invalid uiUpdater for slider #${a}`)}catch(e){console.error(`Error handling slider input for #${a} (value: ${n}):`,e),ui.showError("Error processing control input.")}else console.warn(`Slider #${a} missing value, min, or max attribute.`)},handleLoopToggle=async()=>{const e=audio.getLoopingState();console.log("Main: Toggling loop. Current state: "+(e?"On":"Off"));try{await audio.resumeContext(),e?audio.stopLoop():await audio.startLoop()}catch(e){ui.showError(`Could not toggle loop: ${e?.message||"Unknown error"}`),console.error("Main: Error toggling loop:",e)}finally{ui.updateLoopButton(audio.getLoopingState()),console.log("Main: Loop toggle finished. New state: "+(audio.getLoopingState()?"On":"Off"))}},toggleSideColumns=()=>{controlsColumn&&(controlsColumn.classList.toggle("hidden"),referenceColumn?.classList.toggle("hidden"),console.log(`Side columns toggled. Controls hidden: ${controlsColumn.classList.contains("hidden")}`))},handleMidiEvent=(e,o,i)=>midiRecorder.handleMidiEvent(e,o,i,Date.now()),handleNoteOn=(e,o)=>{const i=audio.getPlaybackRateForNote(e);void 0!==i&&audio.playSampleAtRate(i,o).catch((e=>console.error("Error in playSampleAtRate:",e))),handleMidiEvent("noteon",e,o)},handleNoteOff=(e,o)=>handleMidiEvent("noteoff",e,o),handleMidiStateChange=e=>{if(!midiDeviceSelect||!midiStatusSpan)return;midiStatusSpan.textContent=e.message||e.status,midiStatusSpan.style.color="error"===e.status||"unsupported"===e.status?"var(--error-color)":"",midiDeviceSelect.innerHTML="";const o="ready"===e.status&&e.devices.length>0?"-- Select MIDI Device --":"ready"===e.status?"-- No MIDI Inputs --":e.message||`-- ${e.status} --`,i=createElement("option",{value:"",textContent:o});midiDeviceSelect.appendChild(i),midiDeviceSelect.disabled=!("ready"===e.status&&e.devices.length>0),e.devices?.forEach((e=>{midiDeviceSelect.appendChild(createElement("option",{value:e.id,textContent:e.name}))})),midiDeviceSelect.value=""},getInitialSliderValue=(e,o,{min:i,max:t},n=parseFloat)=>{if(!e)return o;const l=e.value,r=n(l),a=isNaN(r)||""===l?o:r,s=clamp(a,i,t);return e.value=s,s},handleMidiToggleTouch=()=>{midiRecorder&&"function"==typeof midiRecorder.toggleUI?(console.log("Touch: Toggling MIDI Recorder UI"),midiRecorder.toggleUI()):(console.warn("Touch: midiRecorder.toggleUI function not found."),ui.showError("MIDI UI toggle not available."))};async function initializeApp(){if(console.log("Initializing application..."),!findElements())return;ui.init?ui.init():console.error("CRITICAL: ui.init not found!"),ui.clearError();let e=null,o="",i="",t="",n="";try{console.log("Checking for image source in HTML...");const l="undefined"!=typeof imageUrl&&"string"==typeof imageUrl&&""!==imageUrl.trim(),r="undefined"!=typeof imageBase64&&"string"==typeof imageBase64&&""!==imageBase64.trim();if(l)e=imageUrl,o="url",i="",console.log("Found valid 'imageUrl'. Prioritizing URL.");else{if(!r)throw new Error("No valid image source found. Define 'imageUrl' (string URL) or 'imageBase64' (non-empty string) in the HTML script tag.");e=imageBase64,o="base64",i=IMAGE_PREFIX_IF_BASE64,console.log("Found valid 'imageBase64'. Using Base64.")}console.log(`Formatting ${o} image source...`),t=formatDataSource(e,i,`image (${o})`),console.log("Validating audio source presence...");const a="undefined"!=typeof audioBase64_Opus?audioBase64_Opus:null,s=validateDataSourcePresence(a,"audioBase64_Opus");console.log("Formatting audio source..."),n=formatDataSource(s,AUDIO_PREFIX,"audio"),console.log("Setting image source in UI."),ui.setImageSource(t)}catch(e){return console.error("Data validation or processing error during initialization:",e),ui.showError(`Initialization failed: ${e.message}`),void ui.disableControls()}const l=getInitialSliderValue(tempoSlider,DEFAULTS.TEMPO,LIMITS.TEMPO,parseInt),r=getInitialSliderValue(pitchSlider,DEFAULTS.PITCH,LIMITS.PITCH),a=getInitialSliderValue(volumeSlider,DEFAULTS.VOLUME,LIMITS.VOLUME),s=getInitialSliderValue(multiplierSlider,DEFAULTS.MULTIPLIER,LIMITS.MULTIPLIER,parseInt);console.log(`Initial values - Tempo: ${l}, Pitch: ${r.toFixed(2)}, Volume: ${a.toFixed(2)}, Multiplier: ${s}`),console.log("Creating touch controls...");const d=createElement("div",{className:"touch-controls"});touchInfoBtn=createElement("div",{id:"touch-info-btn",className:"touch-button",textContent:"i",title:"Toggle Info Panel (i)"}),touchMidiBtn=createElement("div",{id:"touch-midi-btn",className:"touch-button",textContent:"k",title:"Toggle MIDI UI (k)"}),d.appendChild(touchInfoBtn),midiRecorder&&"function"==typeof midiRecorder.toggleUI?d.appendChild(touchMidiBtn):console.warn("midiRecorder.toggleUI not found, 'k' touch button will not be added."),appContainer?(appContainer.appendChild(d),console.log("Touch controls added to app container.")):(document.body.appendChild(d),console.warn("App container not found, appending touch controls to body.")),console.log("Initializing MIDI Handler..."),midiHandler.init(handleNoteOn,handleNoteOff,handleMidiStateChange),console.log("Initializing Audio Processor...");if(!await audio.init(n,l,r))return console.error("Audio Processor failed to initialize."),ui.showError("Failed to initialize audio processor. Please check console."),void ui.disableControls();audio.setVolume(a),console.log("Initializing MIDI Recorder..."),midiRecorder.init(audio),referencePanel&&initReferencePanel?(initReferencePanel(referencePanel),console.log("Reference panel content initialized.")):referencePanel?console.warn("initReferencePanel function not found, skipping initialization."):console.warn("Reference panel element not found, skipping initialization."),keyboardShortcuts.init&&tempoSlider&&pitchSlider&&volumeSlider&&multiplierSlider?(keyboardShortcuts.init({tempoSlider:tempoSlider,pitchSlider:pitchSlider,volumeSlider:volumeSlider,multiplierSlider:multiplierSlider}),console.log("Keyboard shortcuts initialized.")):console.warn("Cannot initialize keyboard shortcuts: Function or slider elements missing."),setupEventListeners(),console.groupCollapsed("Setting Initial UI Values");try{ui.updateTempoDisplay(l),ui.updatePitchDisplay(r),ui.updateVolumeDisplay(a),ui.updateScheduleMultiplierDisplay(s),ui.updateLoopButton(audio.getLoopingState()),ui.updateReverseButton(audio.getReverseState()),ui.enableControls()}catch(e){console.error("Error setting initial UI values:",e),ui.showError("Problem setting initial control values."),ui.disableControls()}console.groupEnd(),console.log("Application initialized successfully.")}function setupEventListeners(){console.log("Setting up event listeners...");[[mainImage,"click",handleLoopToggle,"mainImage"],[playOnceBtn,"click",()=>audio.playOnce(),"playOnceBtn"],[loopToggleBtn,"click",handleLoopToggle,"loopToggleBtn"],[reverseToggleBtn,"click",()=>{audio.resumeContext().then((()=>ui.updateReverseButton(audio.toggleReverse()))).catch((e=>ui.showError(`Could not toggle reverse: ${e?.message||"Unknown error"}`)))},"reverseToggleBtn"]].forEach((e=>addListener(...e)));[[tempoSlider,"input",e=>handleSliderInput(e,audio.setTempo,ui.updateTempoDisplay,parseInt),"tempoSlider"],[pitchSlider,"input",e=>handleSliderInput(e,audio.setGlobalPitch,ui.updatePitchDisplay),"pitchSlider"],[volumeSlider,"input",e=>handleSliderInput(e,audio.setVolume,ui.updateVolumeDisplay),"volumeSlider"],[multiplierSlider,"input",e=>handleSliderInput(e,audio.setScheduleMultiplier,ui.updateScheduleMultiplierDisplay,parseInt),"multiplierSlider"]].forEach((e=>addListener(...e))),addListener(midiDeviceSelect,"change",(e=>midiHandler.selectDevice(e.target.value)),"midiDeviceSelect"),addListener(infoToggleBtn,"click",toggleSideColumns,"infoToggleBtn"),touchInfoBtn&&(addListener(touchInfoBtn,"click",toggleSideColumns,"touchInfoBtn"),console.log("Added listener for touch 'i' button.")),touchMidiBtn&&(addListener(touchMidiBtn,"click",handleMidiToggleTouch,"touchMidiBtn"),console.log("Added listener for touch 'k' button.")),window.addEventListener("keydown",(e=>{if(e.repeat||_isInputFocused(e.target)||e.metaKey||e.ctrlKey||e.altKey||e.shiftKey)return;const o={Space:()=>audio.playOnce(),i:toggleSideColumns,r:()=>audio.resumeContext().then((()=>ui.updateReverseButton(audio.toggleReverse()))).catch((e=>ui.showError(`Could not toggle reverse: ${e?.message||"Unknown error"}`))),k:()=>midiRecorder.toggleUI()},i="Space"===e.code?"Space":e.key.toLowerCase();o[i]&&(o[i](),e.preventDefault())})),console.log("Event listeners setup complete.")}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",initializeApp):initializeApp();