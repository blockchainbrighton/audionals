// main.js
console.log("--- main.js evaluating ---");import*as audio from"/content/086f00286fa2c0afc4bf66b9853ccf5bcf0a5f79d517f7e7a0d62150459b50e1i0";import*as ui from"/content/943baf5a8d4569764b325ed48a2b269fafaa7429463ab69f6c6a9524974d0d92i0";import*as midiHandler from"/content/0f41339bffd53a3a48ce7d08c786e8764ac091afc21d8b640ef03aae0aeed3c9i0";import*as keyboardShortcuts from"/content/665bc1893dea0d8a83d029f120902c2b4fb242b582b44e6f14703c49ec4978f1i0";import{initReferencePanel}from"/content/0753fec2800a46bd1e06ad3f2bdd3d35a5febeb2976d607c64a8d9326ab74e5fi0";import{clamp,_isInputFocused,addListener,createElement}from"/content/6ee146a17e6582c989ebaa2f2c8b6a039f29493f858d59a89edfb0d3485a7fc4i0";import*as midiRecorder from"/content/e9c3f4bb40fdb85218c94964f1c92bc76293b1ac5bfb92d88ace78a807d9e445i0";const DEFAULTS={TEMPO:78,PITCH:1,VOLUME:1,MULTIPLIER:1},LIMITS={TEMPO:{min:1,max:400},PITCH:{min:.01,max:10},VOLUME:{min:0,max:1.5},MULTIPLIER:{min:1,max:8}};let appContainer,mainImage,playOnceBtn,loopToggleBtn,reverseToggleBtn,tempoSlider,pitchSlider,volumeSlider,multiplierSlider,controlsContainer,infoToggleBtn,referencePanel,errorMessageDiv,midiDeviceSelect,midiStatusSpan,controlsColumn,referenceColumn;function findElements(){[appContainer,mainImage,playOnceBtn,loopToggleBtn,reverseToggleBtn,tempoSlider,pitchSlider,volumeSlider,multiplierSlider,controlsContainer,infoToggleBtn,referencePanel,errorMessageDiv,midiDeviceSelect,midiStatusSpan]=["app","main-image","play-once-btn","loop-toggle-btn","reverse-toggle-btn","tempo-slider","pitch-slider","volume-slider","multiplier-slider","controls-container","info-toggle-btn","reference-panel","error-message","midi-device-select","midi-status"].map((e=>document.getElementById(e))),controlsColumn=document.querySelector(".controls-column"),referenceColumn=document.querySelector(".reference-column");const e={appContainer:appContainer,controlsContainer:controlsContainer,errorMessageDiv:errorMessageDiv,mainImage:mainImage,controlsColumn:controlsColumn};for(const[i,t]of Object.entries(e))if(!t)return console.error(`CRITICAL Error: UI element "${i}" not found. Application cannot initialize correctly.`),(document.getElementById("app")||document.body).innerHTML=`<p style="color:red; padding:20px;">Fatal Error: Required UI element "${i}" missing.</p>`,!1;return referenceColumn||console.warn("Reference column element missing."),midiDeviceSelect&&midiStatusSpan||console.warn("MIDI UI elements missing."),tempoSlider&&pitchSlider&&volumeSlider&&multiplierSlider||console.warn("One or more sliders not found."),!0}const validateAndFormatDataSource=(e,i,t)=>{if(!e||"string"==typeof e&&e.startsWith("/*"))throw new Error(`Required data variable "${t}" is missing or invalid.`);return"string"==typeof e&&e.startsWith("data:")?e:`${i}${e}`},handleSliderInput=(e,i,t,o=parseFloat)=>{const{value:n,min:a,max:l,id:r}=e.target;if(n&&void 0!==a&&void 0!==l)try{const e=o(n),d=clamp(e,o(a),o(l));"function"==typeof i?i(d):console.error(`Invalid audioSetter for slider #${r}`),"function"==typeof t?t(d):console.error(`Invalid uiUpdater for slider #${r}`)}catch(e){console.error(`Error handling slider input for #${r}:`,e),ui.showError("Error processing control input.")}},handleLoopToggle=async()=>{const e=audio.getLoopingState();console.log("Main: Toggling loop. Current state: "+(e?"On":"Off"));try{await audio.resumeContext(),e?audio.stopLoop():await audio.startLoop()}catch(e){ui.showError(`Could not toggle loop: ${e?.message||"Unknown error"}`),console.error("Main: Error toggling loop:",e)}finally{ui.updateLoopButton(audio.getLoopingState()),console.log("Main: Loop toggle finished. New state: "+(audio.getLoopingState()?"On":"Off"))}},toggleSideColumns=()=>{controlsColumn&&(controlsColumn.classList.toggle("hidden"),referenceColumn?.classList.toggle("hidden"),console.log(`Side columns toggled. Controls hidden: ${controlsColumn.classList.contains("hidden")}`))},handleMidiEvent=(e,i,t)=>midiRecorder.handleMidiEvent(e,i,t,Date.now()),handleNoteOn=(e,i)=>{const t=audio.getPlaybackRateForNote(e);void 0!==t&&audio.playSampleAtRate(t,i).catch((e=>console.error("Error in playSampleAtRate:",e))),handleMidiEvent("noteon",e,i)},handleNoteOff=(e,i)=>handleMidiEvent("noteoff",e,i),handleMidiStateChange=e=>{if(!midiDeviceSelect||!midiStatusSpan)return;midiStatusSpan.textContent=e.message||e.status,midiStatusSpan.style.color="error"===e.status||"unsupported"===e.status?"var(--error-color)":"",midiDeviceSelect.innerHTML="";const i=createElement("option",{value:"",textContent:"ready"===e.status&&e.devices.length>0?"-- Select MIDI Device --":"ready"===e.status?"-- No MIDI Inputs --":e.message||`-- ${e.status} --`});midiDeviceSelect.appendChild(i),midiDeviceSelect.disabled=!("ready"===e.status&&e.devices.length>0),e.devices?.forEach((e=>midiDeviceSelect.appendChild(createElement("option",{value:e.id,textContent:e.name})))),midiDeviceSelect.value=""},getInitialSliderValue=(e,i,{min:t,max:o},n=parseFloat)=>{if(!e)return i;const a=n(e.value)||i,l=clamp(a,t,o);return e.value=l,l};async function initializeApp(){if(console.log("Initializing application..."),!findElements())return;let e,i;ui.init?ui.init():console.error("CRITICAL: ui.init not found!"),ui.clearError();try{e=validateAndFormatDataSource("undefined"!=typeof imageBase64&&imageBase64,"data:image/jpeg;base64,","imageBase64"),i=validateAndFormatDataSource("undefined"!=typeof audioBase64_Opus&&audioBase64_Opus,"data:audio/opus;base64,","audioBase64_Opus"),ui.setImageSource(e)}catch(e){return ui.showError(`Initialization failed: ${e.message}`),void console.error("Data validation error:",e)}const t=getInitialSliderValue(tempoSlider,DEFAULTS.TEMPO,LIMITS.TEMPO,parseInt),o=getInitialSliderValue(pitchSlider,DEFAULTS.PITCH,LIMITS.PITCH),n=getInitialSliderValue(volumeSlider,DEFAULTS.VOLUME,LIMITS.VOLUME),a=getInitialSliderValue(multiplierSlider,DEFAULTS.MULTIPLIER,LIMITS.MULTIPLIER);console.log(`Initial values - Tempo: ${t}, Pitch: ${o.toFixed(2)}, Volume: ${n.toFixed(2)}, Multiplier: ${a}`),console.log("Initializing MIDI Handler..."),midiHandler.init(handleNoteOn,handleNoteOff,handleMidiStateChange),console.log("Initializing Audio Processor...");if(await audio.init(i,t,o)){audio.setVolume(n),console.log("Initializing MIDI Recorder..."),midiRecorder.init(audio),referencePanel&&initReferencePanel&&(initReferencePanel(referencePanel),console.log("Reference panel content initialized.")),keyboardShortcuts.init&&tempoSlider&&pitchSlider&&volumeSlider&&multiplierSlider?keyboardShortcuts.init({tempoSlider:tempoSlider,pitchSlider:pitchSlider,volumeSlider:volumeSlider,multiplierSlider:multiplierSlider}):console.error("Cannot initialize keyboard shortcuts: Function or slider elements missing."),setupEventListeners(),console.groupCollapsed("Setting Initial UI Values");try{ui.updateTempoDisplay(t),ui.updatePitchDisplay(o),ui.updateVolumeDisplay(n),ui.updateScheduleMultiplierDisplay(a),ui.updateLoopButton(audio.getLoopingState()),ui.updateReverseButton(audio.getReverseState()),ui.enableControls()}catch(e){console.error("Error setting initial UI values:",e),ui.showError("Problem setting initial control values."),ui.disableControls()}console.groupEnd(),console.log("Application initialized successfully.")}}function setupEventListeners(){console.log("Setting up event listeners...");[[mainImage,"click",handleLoopToggle,"mainImage"],[playOnceBtn,"click",()=>audio.playOnce(),"playOnceBtn"],[loopToggleBtn,"click",handleLoopToggle,"loopToggleBtn"],[reverseToggleBtn,"click",()=>{audio.resumeContext().then((()=>ui.updateReverseButton(audio.toggleReverse()))).catch((e=>ui.showError(`Could not toggle reverse: ${e?.message||"Unknown error"}`)))},"reverseToggleBtn"]].forEach((e=>addListener(...e)));[[tempoSlider,"input",e=>handleSliderInput(e,audio.setTempo,ui.updateTempoDisplay,parseInt),"tempoSlider"],[pitchSlider,"input",e=>handleSliderInput(e,audio.setGlobalPitch,ui.updatePitchDisplay),"pitchSlider"],[volumeSlider,"input",e=>handleSliderInput(e,audio.setVolume,ui.updateVolumeDisplay),"volumeSlider"],[multiplierSlider,"input",e=>handleSliderInput(e,audio.setScheduleMultiplier,ui.updateScheduleMultiplierDisplay,parseInt),"multiplierSlider"]].forEach((e=>addListener(...e))),addListener(midiDeviceSelect,"change",(e=>midiHandler.selectDevice(e.target.value)),"midiDeviceSelect"),addListener(infoToggleBtn,"click",toggleSideColumns,"infoToggleBtn"),window.addEventListener("keydown",(e=>{if(!e.repeat&&!_isInputFocused(e.target)&&!(e.metaKey||e.ctrlKey||e.altKey||e.shiftKey)){const i={Space:()=>audio.playOnce(),i:toggleSideColumns,r:()=>audio.resumeContext().then((()=>ui.updateReverseButton(audio.toggleReverse()))).catch((e=>ui.showError(`Could not toggle reverse: ${e?.message||"Unknown error"}`))),k:()=>midiRecorder.toggleUI()},t="Space"===e.code?"Space":e.key.toLowerCase();i[t]&&(i[t](),e.preventDefault())}})),console.log("Event listeners setup complete.")}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",initializeApp):initializeApp();