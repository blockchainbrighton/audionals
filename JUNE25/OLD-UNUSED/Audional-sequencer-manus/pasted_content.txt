Prompt for Generating the Complete Audional Sequencer Web Application

Build a modern, high-performance web audio sequencer application named "Audional Sequencer" (also branded "Audional Sequencer BitcoinBeats"). The app must be browser-based, using only HTML, CSS, and vanilla JavaScript. Follow these requirements:

1. Core Functionality
Support up to 16 channels, each with:

Independent audio sample (loaded from Bitcoin Ordinals URL or local file)

Individual controls for volume, mute, solo, group assignment, playback speed/pitch, and sample trimming (with waveform display)

64-step sequencer grid per channel, with step on/off toggles and optional reverse playback per step

Allow global control of BPM (1-420), with a visually distinct BPM display

Master play/stop controls

Up to 64 named sequences, with copy/paste of step patterns between sequences, and sequence navigation

Option for continuous playback across sequences

2. Sample & Project Management
Built-in preset system for kits and sample sets (including embedded sequence data)

Ability to save/load full project state (including all sequences, samples, settings) to JSON or Gzipped JSON, and to load from those files

Efficiently fetch and cache audio samples (buffer by URL), including reverse buffer generation (once per sample)

Integrate file uploads and Ordinals sample URLs

3. User Interface
Responsive, visually appealing layout with:

Channel strips (using a template for fast DOM creation)

Clear visual feedback: step playhead, step on/off, button states

Tooltips and accessible modals for all controls (trimmer, volume, pitch, naming, help)

Group assignment and filter view by group

Ability to rename channels

Random and fixed visual theming (user’s choice, persisted to localStorage)

Use minimal DOM manipulation, with templating for dynamic UI (no frameworks; template literals or cloning recommended)

Only one modal/waveform view active at a time; ensure event listeners are cleaned up

4. Audio Engine
Use the Web Audio API for all playback, scheduling, volume, pitch, and trimming

Implement efficient, low-latency step scheduling (lookahead pattern, 30–60fps UI update throttle)

Properly disconnect/destroy Web Audio nodes after use; reuse where possible

Pre-cache reversed audio buffers on sample load

Ensure seamless playback and UI sync, even when rapidly switching samples/sequences

5. Architecture
Modular JavaScript structure:

Central state management (do NOT attach state to window; use an in-app observable store or event bus)

Decoupled modules for UI, state, audio engine, project/preset logic, and utilities

Observer or pub/sub pattern for state/UI sync, with diffing to minimize unnecessary updates

All save/load logic should be unified and DRY; modal scaffolding should be reusable across all modals

Use helper modules for formatting, URL validation, Gzip processing, etc.

6. Performance and Accessibility
Only load and decode audio as needed (lazy load for presets/project loads)

Debounce or throttle UI and autosave events

Use a single DOM element for tooltips, modals, and overlays

Accessible keyboard navigation for all interactive elements

7. Documentation
Include clear in-app instructions/help modal

Well-documented source code (especially for state, audio, and sequencing modules)

Optimize for clarity, maintainability, and minimal redundant logic. Prioritize user experience, audio accuracy, and code efficiency. Provide all required files: HTML, CSS (multiple themes), and modular JS files.








