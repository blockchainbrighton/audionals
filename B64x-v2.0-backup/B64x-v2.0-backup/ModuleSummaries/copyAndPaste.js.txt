Filename: copyAndPaste.js

Overview:
This file manages the copy and paste functionality for sequence settings within the project. It listens for user interactions on designated copy and paste buttons, performs validation of the sequence data, and provides visual feedback (via tooltips and button effects) to confirm actions. The functionality enables users to copy a complete sequence (all channels and steps) and paste it into one or more sequences, with safeguards against unintended overwrites.

Key Variables/Constants:
	•	copyButton & pasteButton: DOM elements identified by their IDs used to trigger copying and pasting operations.
	•	copiedData: A variable that stores a deep copy of the current sequence settings along with metadata (such as sequence type and source index).
	•	Helper Functions:
	•	showConfirmationTooltip(message): Dynamically creates a tooltip to provide user feedback.
	•	isValidSequence(seq) and isValidChannel(channel): Validate that the copied sequence data adheres to expected structure and data types.
	•	updateUIForSequence(sequenceIndex) and validateAndUpdateUI(sequenceIndex): Placeholder functions to refresh the UI after pasting sequence settings.

Frameworks and Methodologies:
	•	DOM Manipulation & Event Handling: Listens for the DOMContentLoaded event to ensure all elements are available before binding click events.
	•	JSON Serialization/Deserialization: Uses JSON.parse(JSON.stringify(...)) for deep cloning the sequence settings, ensuring an accurate copy is made.
	•	User Interaction Patterns: Utilizes browser dialogs (prompt, confirm, alert) to collect user input for the number of sequences to paste and to confirm overwriting existing data.
	•	Visual Feedback: Provides confirmation via dynamically generated tooltips and flashing effects on the paste button to indicate that the copy action was successful.

Noteworthy Implementation Details:
	•	Validation Checks: Before pasting, the code validates the copied sequence structure and warns if any part of the sequence data is invalid.
	•	User Confirmation: Prior to overwriting existing sequences, the user is prompted to confirm the action, minimizing accidental data loss.
	•	Feedback Mechanism: The temporary tooltip creation and flashing button effect enhance the user experience by clearly communicating the result of their actions.
	•	Global Settings Integration: Relies on window.unifiedSequencerSettings for accessing and updating sequence settings, ensuring consistency across the application.

Potential Optimizations:
	•	Modularization: Extracting helper functions (e.g., tooltip creation and validation functions) into a separate utilities module could improve code organization.
	•	Asynchronous Handling: Consider using async/await for operations that may become asynchronous in the future, such as saving or loading large datasets.
	•	UI Update Consolidation: Instead of updating the UI for each pasted sequence in separate loops, consolidating these updates into a single function may improve performance.
	•	Enhanced Error Feedback: Beyond console logging, integrating UI-level error notifications could further improve user experience during failure scenarios.