Filename: stepSchedulers.js

Overview:
This file controls the timing and scheduling of sequence playback. It defines functions to start, pause, resume, and stop the scheduler that triggers step playback. By calculating step durations based on the current BPM, it ensures that audio and UI updates occur in a synchronized and timely manner.

Key Variables/Constants:
	•	timeoutId: Holds the identifier of the currently scheduled timeout for step progression.
	•	stepDuration: Calculated duration of each step based on the BPM from global settings.
	•	nextStepTime: The scheduled time for the next step to play, synchronized with the AudioContext’s current time.
	•	Other Global Variables (assumed):
	•	startTime: Time when the scheduler was started.
	•	pauseTime, isPaused: Used to manage the pause/resume state.
	•	currentStep, beatCount, barCount, sequenceCount: Counters used for tracking playback progression.
	•	Functions:
	•	startScheduler(): Resumes the AudioContext, initializes the scheduling parameters, and begins the recursive scheduling of steps.
	•	scheduleNextStep(): Calculates the next step’s duration and recursively schedules the playStep() function using setTimeout.
	•	pauseScheduler(): Pauses playback by suspending the AudioContext and clearing the current timeout, while recording the pause time.
	•	resumeScheduler(): Resumes the AudioContext, resets nextStepTime, and restarts step scheduling.
	•	stopScheduler(): Stops all scheduled timeouts, disconnects active audio nodes, and resets playback counters.
	•	resetStepLights(): Clears visual indicators (e.g., ‘playing’ classes) from all step buttons.

Frameworks and Methodologies:
	•	Vanilla JavaScript Timing: Uses setTimeout for recursive scheduling of playback steps.
	•	Web Audio API Integration: Interacts with the global AudioContext (from window.unifiedSequencerSettings) to manage audio playback timing and control.
	•	State Synchronization: Adjusts internal counters and time variables to maintain synchronization between audio output and UI updates.
	•	Procedural Scheduling: Follows a clear procedural approach to start, pause, resume, and stop the scheduler with straightforward state management.

Noteworthy Implementation Details:
	•	Dynamic Step Duration Calculation: The step duration is dynamically calculated from the current BPM, ensuring that the sequencer adapts in real time to BPM changes.
	•	Recursive Scheduling: The scheduleNextStep() function uses recursive setTimeout calls to continually schedule playback, providing a simple yet effective scheduling loop.
	•	Graceful Pause/Resume: Implements logic to suspend and resume the AudioContext and adjust scheduling, allowing smooth pausing and resumption of playback.
	•	Cleanup on Stop: Ensures that all active audio nodes are stopped and disconnected, and that counters are reset to maintain a consistent state after stopping the scheduler.

Potential Optimizations:
	•	Precision Timing: Consider using setInterval or a more robust timing mechanism (or even the Web Audio API’s scheduling capabilities) for improved timing accuracy over long sessions.
	•	Error Handling: Enhance error handling to cover edge cases (e.g., when the AudioContext is unavailable or in an unexpected state) to prevent unexpected behavior.
	•	Code Consolidation: Refactor similar scheduling and counter reset logic into reusable helper functions to reduce code duplication.
	•	Performance Improvements: Investigate potential performance improvements by minimizing the overhead in recursive scheduling, particularly for high BPM settings where setTimeout intervals become very short.