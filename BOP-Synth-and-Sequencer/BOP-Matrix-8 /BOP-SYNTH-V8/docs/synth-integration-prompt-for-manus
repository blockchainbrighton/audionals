### Task prompt for **Manus AI**

> **Primary goal**
> Integrate my modular JavaScript synthesizer (a **BVST – “block‑chain virtual studio instrument”**) into my JavaScript sequencer **and** lay down a reusable framework so any future BVST‑compliant instrument (synth, drum machine, FX, etc.) can be plugged in with minimal effort.

---

#### What you’ll receive

* **Full source** of the synthesizer
* **Full source** of the sequencer
  Use these to devise the most efficient, maintainable upgrade path.

---

#### Core requirements

1. **New instrument channel**

   * Extend the sequencer (currently sampler‑only) with an *instrument channel* that can host any BVST instrument.

2. **UI embedding**

   * When an instrument is loaded, render its existing standalone UI inside the sequencer window with identical look‑and‑feel and full interactivity.

3. **State management**

   * Parameter changes must affect playback in real‑time.
   * On project save, serialize the instrument’s complete state into (or alongside) the sequencer’s project file so re‑opening restores everything automatically.

4. **Step‑based control**

   * Each step in an instrument channel must be able to target configurable parameters (pitch, filter cutoff, macros, etc.).
   * Support per‑step modulation/automation where feasible.

5. **Extensible framework**

   * Define a clean sequencer‑instrument contract—channel factory, lifecycle hooks, (de)serialization, and step‑to‑parameter mapping—so new BVST instruments need only minimal boilerplate.
   * Provide concise guidelines for third‑party instrument authors.

6. **Code quality & testing**

   * Modern JS/TS best practices (DRY, KISS) and, where practical, TDD.
   * No external libraries: the synth uses an **on‑chain fork of Tone.js** and must remain self‑contained.
   * Include or outline unit/integration tests for the new functionality.

---

#### Deliverables expected from **Manus AI**

* **Design overview** – high‑level architecture changes, affected files, and rationale.
* **Concrete code** – full implementations or updated functions/classes/modules in the sequencer (reference untouched code without rewriting it).
* **Example workflow** – loading a synth, mapping step parameters, saving, and re‑loading a project.
* **Developer guidelines** – steps and patterns for integrating additional BVST instruments.

---

#### Assumptions & constraints

* Synth code is already modular and embeddable.
* Focus changes on the sequencer; only suggest synth modifications that clearly ease current and future integrations (logic, UI, naming,recording, saving, loading etc.).
* Prioritize performance, security, and long‑term maintainability throughout.
