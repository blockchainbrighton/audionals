Excellent. This is the perfect use case for a powerful AI model. A well-crafted prompt is essential for a complex refactoring task like this.

Here is a prompt designed to be fed directly to Manus AI. It's structured to provide clear context, define the problem, specify the desired solution in detail, and set constraints to ensure the output is correct and maintains functionality.

The Prompt

[Start of Prompt]

Role: You are an expert software architect specializing in modern, component-based JavaScript application design. Your task is to perform a major architectural refactoring of a complete synthesizer application.

Context: I have a fully functional web-based synthesizer application. The code is provided below in its entirety. While the features work, the architecture is monolithic. It relies heavily on a global state object (window.synthApp), direct DOM manipulation from various modules (document.getElementById), and tight coupling between modules (e.g., Keyboard.js directly calls methods on EnhancedRecorder.js). This makes the application impossible to use as a portable component within a larger host application, such as a sequencer.

Primary Objective: Refactor the entire codebase from a monolithic web page into a self-contained, portable, and instantiable ES6 component (BopSynthComponent). The final component must be able to be mounted into any DOM element and should not leak any state or functionality into the global window scope. The functionality of the synthesizer must remain identical to the original version.

Detailed Refactoring Plan (Follow these steps precisely):

1. Create the Main Component: BopSynthComponent.js

This will be the new entry point and the public interface for the synth.

Structure: It must be an ES6 class named BopSynthComponent.

Constructor: The constructor(targetElement, Tone) must accept two arguments:

targetElement: The DOM element where the synth's UI will be rendered.

Tone: The already-loaded Tone.js library object (Dependency Injection).

UI Rendering: The constructor must immediately render the synthesizer's complete HTML structure into the targetElement. The HTML from the body of BOP-V8.html should be moved into a template string inside this class. The component must not assume any HTML exists on the page beforehand.

State Management:

Eliminate the global window.synthApp object entirely.

All state (e.g., seq, curOct, isRec, isPlaying) must be managed as instance properties of the BopSynthComponent class (e.g., this.state = { ... }).

Module Instantiation: The constructor will create and hold instances of all the other refactored modules (e.g., this.keyboard = new Keyboard(...), this.controls = new EnhancedControls(...)). It must pass the necessary dependencies (like a reference to itself, this, and any required DOM elements) to the constructors of these sub-modules.

Internal Communication (Decoupling):

Implement a simple event emitter pattern within the BopSynthComponent. You can add simple on(eventName, callback) and emit(eventName, data) methods to the class.

Sub-modules will use this.component.emit(...) to announce events (e.g., this.component.emit('noteOn', 'C4')).

The BopSynthComponent constructor will listen for these events using this.on(...) and orchestrate the actions between modules (e.g., on a 'noteOn' event, it will call methods on the recorder and the synth engine).

2. Refactor All Sub-Modules (keyboard.js, enhanced-recorder.js, piano-roll.js, etc.)

Apply the following pattern to every logic/UI module:

Convert to Classes: Change them from singleton objects to ES6 classes.

Constructor for Dependencies: The constructor of each class must accept its dependencies. At a minimum, this will be (containerElement, mainComponent). The containerElement is its specific part of the UI (e.g., the div for the keyboard), and mainComponent is the instance of BopSynthComponent.

Scoped DOM Access: Replace all calls to document.getElementById(...) with this.containerElement.querySelector(...) or this.mainComponent.rootElement.querySelector(...). This ensures the module only looks for elements within the synth's own UI.

Scoped State Access: Replace all reads/writes to window.synthApp with reads/writes to this.mainComponent.state.

Decoupled Communication: Remove all direct cross-module calls (e.g., delete import EnhancedRecorder from './enhanced-recorder.js' from keyboard.js). Instead, use the event emitter provided by the main component: this.mainComponent.emit('eventName', data).

3. Deprecate Obsolete Files

app.js: This file's logic should be entirely absorbed by the new BopSynthComponent.js constructor. It should be deleted.

synth-module.js: This file is now redundant and should be deleted. The new BopSynthComponent.js is its replacement.

BOP-V8.html: This file is now only for reference. Its body content will live inside the BopSynthComponent's template string.

save-load.js: Refactor this module. The captureState and loadState logic is good, but it should be modified to get its state from the mainComponent instance passed to it, not from globals or direct DOM scraping. The UI buttons should be wired up within its constructor.

4. Final Output Requirements:

Provide the complete, refactored code for all the JavaScript files.

Each file should be clearly demarcated with --- START OF FILE [filename.js] ---.

The code must be fully functional and ready to be used.

A new file, BopSynthComponent.js, should be created as the central piece of the new architecture.

The functionality, UI appearance, and behavior must not change. This is a purely architectural refactor.

Here is the full codebase for you to refactor. Process all files together to understand the full context before generating the new, refactored codebase.

Generated html
--- START OF FILE BOP-V8.html ---
... (paste full content of BOP-V8.html here) ...
--- START OF FILE audio-safety.js ---
... (paste full content of audio-safety.js here) ...
--- START OF FILE app.js ---
... (paste full content of app.js here) ...
--- START OF FILE enhanced-controls.js ---
... (paste full content of enhanced-controls.js here) ...
--- START OF FILE enhanced-effects.js ---
... (paste full content of enhanced-effects.js here) ...
--- START OF FILE enhanced-recorder.js ---
... (paste full content of enhanced-recorder.js here) ...
--- START OF FILE keyboard.js ---
... (paste full content of keyboard.js here) ...
--- START OF FILE envelope-manager.js ---
... (paste full content of envelope-manager.js here) ...
--- START OF FILE loop-manager.js ---
... (paste full content of loop-manager.js here) ...
--- START OF FILE loop-ui.js ---
... (paste full content of loop-ui.js here) ...
--- START OF FILE piano-roll.js ---
... (paste full content of piano-roll.js here) ...
--- START OF FILE save-load.js ---
... (paste full content of save-load.js here) ...
--- START OF FILE midi.js ---
... (paste full content of midi.js here) ...
--- START OF FILE style.css ---
... (paste full content of style.css here) ...
--- START OF FILE synth-engine.js ---
... (paste full content of synth-engine.js here) ...
--- START OF FILE synth-module.js ---
... (paste full content of synth-module.js here) ...
--- START OF FILE transport.js ---
... (paste full content of transport.js here) ...


[End of Prompt]