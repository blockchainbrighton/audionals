// visualiserDrawingColours.js

console.log("drawingColours.js loaded");const cv=document.getElementById("cv"),cx=cv.getContext("2d");cv.width=window.innerWidth,cv.height=window.innerWidth;const draw=e=>{const r="undefined"==typeof t?0:RS*(e-t)*100;t=e,clearCanvas&&cx.clearRect(0,0,cv.width,cv.height),cp.rP(cp.c,r),cp.drawObjectD2(cp.cy,e),cp.drawObjectD2(cp.sp1,e),cp.drawObjectD2(cp.sp2,e),requestAnimationFrame(draw)};cp.drawObjectD2=(e,r)=>{const c=!isPlaybackActive||null===activeChannelIndex;for(const t of e.f){const o=t.map((r=>e.v[r])),n=o.map((e=>({x:e.x,y:e.y})));cx.beginPath(),cx.moveTo(n[0].x,n[0].y);for(let e=1;e<n.length;e++)cx.lineTo(n[e].x,n[e].y);cx.closePath();const s=180*Math.atan2(n[0].y-cv.height/2,n[0].x-cv.width/2)/Math.PI;if(c){const e=getColors0(s,r,o);if(!e||0===e.length)return void console.error("No colors returned for initial display.");cx.fillStyle=e[0]}else{activeArrayIndex[activeChannelIndex];const e=getColorArray(s,r,o,AccessLevel);if(!e||0===e.length)return void console.error(`No colors returned for AccessLevel: ${AccessLevel}`);cx.fillStyle=e[cci2%e.length]}cx.fill(),cx.strokeStyle="black",cx.stroke()}},requestAnimationFrame(draw);const getColorArray=(e,r,c,t)=>{const o=accessLevelMappings[t],n=activeArrayIndex[activeChannelIndex];if(!o.includes(n))return console.error(`Array index ${n} not allowed for AccessLevel ${t}`),[];switch(n){case 0:return getColors0(e,r,c);case 1:return getColors1(e,r,c);case 2:return getColors2(e,r,c);case 3:return getColors3(e,r,c);case 4:return getColors4(e,r,c);case 5:return getColors5(e,r,c);case 6:return getColors6(e,r,c);case 7:return getColors7(e,r,c);default:return console.error(`Invalid arrayIndex ${n}`),[]}};