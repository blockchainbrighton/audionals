async function fetchAndProcessAudioData(e){await Promise.all(e.map(((e,t)=>processAudioUrl(e,t+1,audioCtx)))),createReversedBuffersForChannelsWithReverseSteps()}function getOrCreateGainNode(e){return gainNodes[e]||(gainNodes[e]=audioCtx.createGain(),gainNodes[e].connect(audioCtx.destination)),gainNodes[e]}async function processAudioUrl(e,t,r){try{const o=await fetch(e);if(!o.ok)throw new Error(`Failed to fetch from URL: ${e}, Status: ${o.status}`);const a=o.headers.get("Content-Type"),n=await fetchAndDecodeAudio(o,a,r);if(n){const e=`Channel ${t}`,r=getOrCreateGainNode(e),o=parseVolumeLevel(globalVolumeLevels[e])*globalVolumeMultiplier;r.gain.value=o,globalAudioBuffers.push({buffer:n,gainNode:r,channel:e})}else console.error(`Failed to decode audio for ${channelName}:`,e)}catch(e){console.error(`Error processing audio URL for ${channelName}:`,e)}}function setGlobalVolumeMultiplier(e){globalVolumeMultiplier=Math.max(0,e),globalAudioBuffers.forEach((({gainNode:e,channel:t})=>{const r=parseVolumeLevel(globalVolumeLevels[t]);e.gain.value=r*globalVolumeMultiplier}))}async function fetchAndDecodeAudio(e,t,r){if(/audio\/(wav|mpeg|mp4)/.test(t)||/video\/mp4/.test(t)){const t=await e.arrayBuffer();return r.decodeAudioData(t)}const o=await e.text();let a=null;if(/application\/json/.test(t)?a=JSON.parse(o).audioData:/text\/html/.test(t)&&(a=extractBase64FromHTML(o)),a){const e=base64ToArrayBuffer(a.split(",")[1]);return r.decodeAudioData(e)}if(/audio\//.test(t)){const t=await e.arrayBuffer();return r.decodeAudioData(t)}return null}function createReversedBuffersForChannelsWithReverseSteps(){const e=new Set;for(const t of Object.values(globalJsonData.projectSequences))for(const[r,o]of Object.entries(t))o.steps.some((e=>e.reverse))&&e.add(`Channel ${parseInt(r.slice(2))+1}`);globalAudioBuffers.forEach((({buffer:t,channel:r})=>{e.has(r)&&(globalReversedAudioBuffers[r]=createReversedBuffer(t))}))}function createReversedBuffer(e){const t=audioCtx.createBuffer(e.numberOfChannels,e.length,e.sampleRate);for(let r=0;r<e.numberOfChannels;r++){const o=e.getChannelData(r);t.getChannelData(r).set([...o].reverse())}return t}function clampVolume(e){return Math.max(0,Math.min(e,3))}function parseVolumeLevel(e){let t=1;"number"==typeof e?t=e:"string"==typeof e&&(t=parseFloat(e)),isNaN(t)&&(t=1);return clampVolume(t)}function base64ToArrayBuffer(e){try{const t=window.atob(e),r=t.length,o=new Uint8Array(r);for(let e=0;e<r;e++)o[e]=t.charCodeAt(e);return o.buffer}catch(e){return console.error("[base64ToArrayBuffer] Error converting base64 to ArrayBuffer:",e),null}}function extractBase64FromHTML(e){try{const t=new DOMParser,r=t.parseFromString(e,"text/html").querySelector("audio[data-audionalSampleName] source");if(r){const e=r.getAttribute("src");if(/^data:audio\/(wav|mp3|mp4);base64,/.test(e.toLowerCase()))return e;if(/audio\//.test(e.toLowerCase()))return e;console.error("[extractBase64FromHTML] Audio data does not start with expected base64 prefix.")}else console.error("[extractBase64FromHTML] Could not find the audio source element in the HTML content.")}catch(e){console.error("[extractBase64FromHTML] Error parsing HTML content:",e)}return null}