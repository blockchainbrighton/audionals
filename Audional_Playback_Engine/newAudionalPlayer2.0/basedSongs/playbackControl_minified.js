function startPlaybackLoop(){globalJsonData&&(bpm=globalJsonData.projectBPM)}async function initializePlayback(){await resumeAudioContext(),startPlaybackLoop(),startWorker(),console.log("Playback initialized")}async function stopPlayback(){console.log("Stopping all active sources"),Object.keys(activeSources).forEach((a=>{activeSources[a].forEach((({source:a,gainNode:e})=>{e.gain.cancelScheduledValues(audioCtx.currentTime),e.gain.setValueAtTime(e.gain.value,audioCtx.currentTime),e.gain.linearRampToValueAtTime(0,audioCtx.currentTime+fadeDuration),a.stop(audioCtx.currentTime+fadeDuration),a.disconnect(),e.disconnect()})),activeSources[a]=[]})),setTimeout((async()=>{await audioCtx.suspend(),resetPlaybackState(),console.log("Playback stopped and active sources cleared")}),50)}