// colourSettingsLevel7.js

{
    const R = 100; // Set a default or required value for R in this context
  
    // Function to get colors
    function getColors7(o, a, l) {
      const v = l; // Alias for clarity, where l represents vertices
  
      // Cache values of x, y, z for reuse
      const { x: x0, y: y0, z: z0 } = l[0];
      const { x: x1, y: y1, z: z1 } = l[1];
      const { x: x2, y: y2, z: z2 } = l[2];
  
      // Precompute z values
      const l0zR = z0 + R;
      const l1zR = z1 + R;
      const l2zR = z2 + R;
  
      // Pre-generate random values for reuse
      const randomValues = Array.from({ length: 6 }, () => Math.random());
  
      // Compute sine values for dynamic colors
      const now = Date.now();
      const sinNow = Math.sin(now);

      // Use a complete range of color indexes from 1 to 23
      const colorIndexes = Array.from({ length: 23 }, (_, i) => i + 1);
      const calculatedColor = Math.floor(randomValues[0] * ((l2zR + 255) / (11 * R) * 255));
  
      // Return dynamic color settings
      return [
        // // Original colors
        // (calculatedColor > 0.01 ? 
        //   `rgb(${calculatedColor}, ${calculatedColor}, ${calculatedColor})` : 
        //   "#FF0000"), // Bright red

        // (calculatedColor > 0.01 ? 
        //   `rgb(${calculatedColor}, ${calculatedColor}, ${calculatedColor})` : 
        //   "#00FF00"), // Bright green

        // (calculatedColor > 0.01 ? 
        //   `rgb(${calculatedColor}, ${calculatedColor}, ${calculatedColor})` : 
        //   "#0000FF"), // Bright blue

        // // Additional exciting colors
        // (calculatedColor > 0.01 ? 
        //   `rgb(${calculatedColor}, ${calculatedColor}, ${calculatedColor})` : 
        //   "#FF1493"), // Deep pink

        // (calculatedColor > 0.01 ? 
        //   `rgb(${calculatedColor}, ${calculatedColor}, ${calculatedColor})` : 
        //   "#800080"), // Deep purple

        // Rainbow effect using sine wave to create a gradient


        `rgb(${Math.floor(127.5 * (1 + Math.sin(0.3 * now)))}, ${Math.floor(127.5 * (1 + Math.sin(0.3 * now + 2 * Math.PI / 3)))}, ${Math.floor(127.5 * (1 + Math.sin(0.3 * now + 4 * Math.PI / 3)))})`, // Rainbow 3

        `rgb(${Math.floor(127.5 * (1 + Math.sin(0.4 * now)))}, ${Math.floor(127.5 * (1 + Math.sin(0.4 * now + 2 * Math.PI / 3)))}, ${Math.floor(127.5 * (1 + Math.sin(0.4 * now + 4 * Math.PI / 3)))})`, // Rainbow 4
      ];
    }
  
    // Function to return the length of the array generated by getColors7
    function getColors7Length() {
      // Safely generate a default color array for length calculation
      const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
      const length = getColors7(null, null, defaultL).length;
      console.log(`getColors7 length: ${length}`);
      return length;
    }
  
    // Log the length of the colors array when the file is loaded
    getColors7Length();
  }
