console.log("Colour settings level 5 loaded");

{
const R = 100; // Set a default or required value for R in this context

// Utility function to generate random RGB color
function randomRGB(factor) {
    return `rgb(${Math.floor(Math.random() * 255 * factor)}, ${Math.floor(Math.random() * 255 * factor)}, ${Math.floor(Math.random() * 255 * factor)})`;
}

// Main function to get colors
function getColors5(o, a, l) {
    const v = l; // Alias for clarity, where l represents vertices

    // Pre-generate random values and colors
    const randomValues = Array.from({ length: 50 }, () => Math.random()); // Increased number of random values for more variety
    const primaryAndSecondaryColors = ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF"]; // Example colors
    const randomColors = Array.from({ length: 20 }, () => randomRGB(1)); // Generate more random colors

    const sinValue = Math.abs(Math.sin(a / 3000));

    // Cache values of x, y, z for reuse
    const { x: x0, y: y0, z: z0 } = l[0];
    const { x: x1, y: y1 } = l[1];
    const { x: x2, y: y2 } = l[2];

    const l0zR = z0 + R;
    const l2zR = l[2].z + R;
    const l1zR = l[1].z + R;

    // Arrays and modulators for creating variations
    const modulators = [0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 2, 2.5, 3];
    const colorFactors = [0.5, 0.75, 1, 1.25, 1.5, 2, 2.5, 3];
    const scales = [1, 10, 50, 100, 200, 500, 1000];

    // Enhanced color variations using precomputed values
    return [
        ...Array.from({ length: 40 }, (_, i) => {
            const modulator = modulators[i % modulators.length];
            const colorFactor = colorFactors[i % colorFactors.length];
            const scale = scales[i % scales.length];
            const colorValue = Math.floor(randomValues[i] * (l0zR / scale) * 255 * colorFactor);
            return colorValue > 10 ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : randomColors[i % randomColors.length];
        }),

        // Example: Adding RGB colors with modulators for variety
        ...Array.from({ length: 30 }, (_, i) => {
            const modulator = modulators[i % modulators.length];
            return `rgb(${Math.floor(Math.random() * 255 * modulator)}, ${Math.floor(Math.random() * 255 * modulator)}, ${Math.floor(Math.random() * 255 * modulator)})`;
        }),

        // Additional color variations with primary and secondary colors
        ...primaryAndSecondaryColors.map(color => {
            const modulator = modulators[Math.floor(Math.random() * modulators.length)];
            return `rgba(${parseInt(color.slice(1, 3), 16) * modulator}, ${parseInt(color.slice(3, 5), 16) * modulator}, ${parseInt(color.slice(5, 7), 16) * modulator}, ${Math.random().toFixed(2)})`;
        }),

        // Use random factors and primary/secondary colors
        ...Array.from({ length: 30 }, (_, i) => {
            const color = primaryAndSecondaryColors[i % primaryAndSecondaryColors.length];
            const modulator = modulators[Math.floor(Math.random() * modulators.length)];
            return `rgba(${parseInt(color.slice(1, 3), 16) * modulator}, ${parseInt(color.slice(3, 5), 16) * modulator}, ${parseInt(color.slice(5, 7), 16) * modulator}, ${randomValues[i % randomValues.length].toFixed(2)})`;
        }),
    ];
}

// Function to return the length of the array generated by getColors5
function getColors5Length() {
    const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
    const length = getColors5(null, null, defaultL).length;
    console.log(`getColors5 length: ${length}`);
    return length;
}

// Log the length of the colors array when the file is loaded
getColors5Length();
}
