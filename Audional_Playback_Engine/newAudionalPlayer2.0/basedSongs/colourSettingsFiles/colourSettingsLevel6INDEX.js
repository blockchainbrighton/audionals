console.log("Colour settings level 6 loaded");

{
const R = 100; // Set a default or required value for R in this context

// Helper function to parse hex color
function parseHexColor(color) {
    return {
        r: parseInt(color.slice(1, 3), 16),
        g: parseInt(color.slice(3, 5), 16),
        b: parseInt(color.slice(5, 7), 16)
    };
}

// Main function to get colors
function getColors6(o, a, l) {
    const v = l; // Alias for clarity, where l represents vertices

    // Pre-generate random values and colors
    const randomValues = Array.from({ length: 30 }, () => Math.random());
    const primaryAndSecondaryColors = ["#FF0000", "#00FF00", "#0000FF", "#FFD700", "#C0C0C0", "#FF1493", "#B20000", "#000000", "#8000FF"]; // Example colors

    const sinValue = Math.abs(Math.sin(a / 3000));

    // Cache values of x, y, z for reuse
    const { x: x0, y: y0, z: z0 } = l[0];
    const { x: x1, y: y1, z: z1 } = l[1];
    const { x: x2, y: y2, z: z2 } = l[2];

    const l0zR = z0 + R;
    const l2zR = z2 + R;
    const l1zR = z1 + R;

    // Arrays and modulators for creating variations
    const modulators = [0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 2, 2.5, 3];

    // Enhanced color variations using precomputed values
    return [
        // Spaceman Eyes
        `rgb(${Math.floor(randomValues[21] * (l0zR / (2 * R) * 255))}, ${Math.floor(randomValues[21] * (l0zR / (2 * R) * 255))}, ${Math.floor(randomValues[21] * (l0zR / (2 * R) * 255))})`, // Disco Eyes

        // Additional color variations with primary and secondary colors
        ...primaryAndSecondaryColors.map(color => {
            const { r, g, b } = parseHexColor(color);
            const modulator = modulators[Math.floor(Math.random() * modulators.length)];
            return `rgba(${r * modulator}, ${g * modulator}, ${b * modulator}, ${Math.random().toFixed(2)})`;
        }),

        // Use random factors and primary/secondary colors
        ...Array.from({ length: 30 }, (_, i) => {
            const color = primaryAndSecondaryColors[i % primaryAndSecondaryColors.length];
            const { r, g, b } = parseHexColor(color);
            const modulator = modulators[Math.floor(Math.random() * modulators.length)];
            return `rgba(${r * modulator}, ${g * modulator}, ${b * modulator}, ${randomValues[i].toFixed(2)})`;
        }),
    ];
}

// Function to return the length of the array generated by getColors5
function getColors6Length() {
    const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
    const length = getColors6(null, null, defaultL).length;
    console.log(`getColors6 length: ${length}`);
    return length;
}

// Log the length of the colors array when the file is loaded
getColors6Length();
}
