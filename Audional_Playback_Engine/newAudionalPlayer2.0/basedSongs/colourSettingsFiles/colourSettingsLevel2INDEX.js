// colourSettingsLevel2.js

console.log("Colour settings level 2 loaded");

{
  const R = 100; // Set a default or required value for R in this context

  // Main function to get colors
  function getColors2(o, a, l) {
    const v = l; // Alias for clarity, where l represents vertices

    // Cache values of x, y, z for reuse
    const { x: x0, y: y0, z: z0 } = l[0];
    const { x: x1, y: y1 } = l[1];
    const { x: x2, y: y2 } = l[2];

    // Precompute shifted x values
    const x1Shifted = x1 - 1500;
    const x2Shifted = x2 - 1500;
    const x3Shifted = x1 - 555;

    // Pre-generate random values for reuse
    const randomValues = Array.from({ length: 24 }, () => Math.random());

    // Precompute commonly used values
    const now = Date.now();
    const sinNow = Math.sin(now);
    const sinNowDiv1000 = Math.sin(now / 1000);
    const sinNowDiv2000 = Math.sin(now / 2000);
    const sinNowDiv10 = Math.sin(now / 10);
    const sinNowDiv5000 = Math.sin(now / 5000);
    const sinNowDiv100 = Math.sin(now / 100);
    const sinNowDivMinus17 = Math.sin(now / -17);

    // Precompute dynamic RGB colors
    const dynamicRgbColors = [
      getDynamicRgbWithIndex(x2, y2, x2, y0, 8, window.colorPalette),  // Very dark orange -> index 8
      getDynamicRgbWithIndex(x2, y2, x2, y0, 9, window.colorPalette),  // Very dark green -> index 9
      getDynamicRgbWithIndex(x2, y2, x2, y0, 14, window.colorPalette), // Darkorange -> index 14
      getDynamicRgbWithIndex(x2, y2, x2, y0, 10, window.colorPalette), // Very dark blue -> index 10
      getDynamicRgbWithIndex(x2, y2, x2, y0, 11, window.colorPalette)  // Dark red -> index 11
    ];

    // Return enhanced array of color variations
    return [
      // FULL SHAPE COLOUR (50/50)
      ...[280, 111, 120, 111, 95, 111, 111, 111].map((divisor, i) =>
        getConditionalColorWithIndex(x0, y0, divisor, [4, 20, 10, 15, 10, 4, 9, 5][i], [14, 15, 10, 14, 10, 20, 13, 13][i], window.colorPalette)
      ),

      // MIDDLE LINE CRAWLER TOP LEFT
      ...Array.from({ length: 16 }, (_, i) =>
        getConditionalColorWithIndex(x3Shifted, y0, 100, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][i], [13, 13, 13, 20, 15, 13, 5, 19, 10, 15, 15, 5, 21, 15, 13, 10][i], window.colorPalette)
      ),

      // MIDDLE LINE CRAWLER BOTTOM RIGHT
      ...Array.from({ length: 16 }, (_, i) =>
        getConditionalColorWithIndex(x1Shifted, y0, -100, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][i], [10, 13, 5, 19, 15, 2, 5, 21, 10, 15, 5, 21, 15, 12, 10, 18][i], window.colorPalette)
      ),

      // 3 SQUARE MIDDLE CRAWLER
      ...Array.from({ length: 16 }, (_, i) =>
        getConditionalColorWithIndex(x2Shifted, y0, -300, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][i], [10, 1, 5, 21, 15, 15, 5, 17, 10, 15, 5, 21, 15, 1, 10, 18][i], window.colorPalette)
      ),

      // BOTTOM RIGHT CORNER
      ...Array.from({ length: 20 }, (_, i) =>
        getConditionalColorWithIndex(x2, y0, 600, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][i], [10, 1, 5, 18, 15, 13, 5, 21, 10, 15, 5, 19, 15, 1, 10, 20, 1, 20, 1, 17][i], window.colorPalette)
      ),

      // EU Flag Styles
      ...Array.from({ length: 18 }, (_, i) =>
        getConditionalColorWithIndex(x0, y0, 15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][i], [10, 10, 1, 10, 19, 15, 10, 5, 1, 5, 15, 10, 1, 5, 13, 13, 13, 13][i], window.colorPalette)
      ),

    //   // IGUANA EYES
    //   ...dynamicRgbColors
    ];
  }

  // Function to return the length of the array generated by getColors2
  function getColors2Length() {
    const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
    const length = getColors2(null, null, defaultL).length;
    console.log(`getColors2 length: ${length}`);
    return length;
  }

  // Log the length of the colors array when the file is loaded
  getColors2Length();
}
