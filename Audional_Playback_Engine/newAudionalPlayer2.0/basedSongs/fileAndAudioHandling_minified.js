function updateVolumesDuringPlayback(){globalAudioBuffers.forEach((({gainNode:e,channel:t})=>{const n=parseVolumeLevel(globalVolumeLevels[t]);e.gain.setValueAtTime(n*globalVolumeMultiplier,audioCtx.currentTime)}))}function rampVolume(e,t,n=.05){const a=audioCtx.currentTime;e.gain.cancelScheduledValues(a),e.gain.setValueAtTime(e.gain.value,a),e.gain.linearRampToValueAtTime(t,a+n)}function parseVolumeLevel(e){let t=1;return"number"==typeof e?t=e:"string"==typeof e&&(t=parseFloat(e)),isNaN(t)&&(t=1),clampVolume(t)}function clampVolume(e){return Math.max(0,Math.min(e,3))}async function resumeAudioContext(){await window.AudioContextManager.resume()}async function ensureAudioContextState(){await resumeAudioContext(),console.log("AudioContext state:",audioCtx.state)}function playAudioForChannel(e){resumeAudioContextIfNeeded();const t=`Channel ${e}`,n=globalAudioBuffers.find((e=>e.channel===t));if(n?.buffer){playBuffer(isReversePlay&&globalReversedAudioBuffers[t]?globalReversedAudioBuffers[t]:n.buffer,isReversePlay&&globalReversedAudioBuffers[t]?calculateReversedTrimTimes(globalTrimTimes[t]):globalTrimTimes[t]||{startTrim:0,endTrim:1},t,audioCtx.currentTime),notifyVisualizer(e-1)}else console.error(`No audio buffer or trim times found for ${t}`)}function calculateReversedTrimTimes(e){return{startTrim:1-e.endTrim,endTrim:1-e.startTrim}}function startPlaybackLoop(){globalJsonData&&(bpm=globalJsonData.projectBPM)}function playSequenceStep(e){if(!isReadyToPlay||!Object.keys(preprocessedSequences).length)return console.error("Sequence data is not ready or empty.");const t=Object.keys(preprocessedSequences);currentSequence%=t.length;const n=preprocessedSequences[t[currentSequence]];Object.keys(n).length?(playSteps(n.normalSteps,e),playSteps(n.reverseSteps,e,!0),incrementStepAndSequence(t.length)):incrementStepAndSequence(t.length)}function playSteps(e,t,n=!1){for(const[a,o]of Object.entries(e))if(Array.isArray(o)){const e=o.find((e=>e.step===currentStep));e&&playChannelStep(a,e,t,n)}else console.error("Expected steps to be an array, but got:",o)}function playChannelStep(e,t,n,a){const o=e,i=globalAudioBuffers.find((e=>e.channel===o)),r=globalTrimTimes[o];if(i?.buffer&&r){playBuffer(a?globalReversedAudioBuffers[o]:i.buffer,a?calculateReversedTrimTimes(r):r,o,n),notifyVisualizer(parseInt(o.slice(8))-1,t.step)}else console.error(`No audio buffer or trim times found for ${o}`)}function scheduleNotes(){const e=audioCtx.currentTime;for(nextNoteTime=Math.max(nextNoteTime,e);nextNoteTime<e+.1;)playSequenceStep(nextNoteTime),nextNoteTime+=getStepDuration()}function notifyVisualizer(e,t){AudionalPlayerMessages.postMessage({action:"activeStep",channelIndex:e,step:t}),document.dispatchEvent(new CustomEvent("internalAudioPlayback",{detail:{action:"activeStep",channelIndex:e,step:t}}))}document.addEventListener("click",(async()=>{if(console.log("[fileAndAudioHandling.js] Click event detected."),"function"==typeof window.ensureAudioContextState){await window.ensureAudioContextState(),console.log("[fileAndAudioHandling.js] AudioContext ensured."),togglePlayback(),console.log("[fileAndAudioHandling.js] Playback started. Dispatching playbackStarted event.");const e=new CustomEvent("playbackStarted");document.dispatchEvent(e)}else console.error("[fileAndAudioHandling.js] ensureAudioContextState is not defined or not a function")})),window.addEventListener("beforeunload",cleanUpWorker);const fadeDuration=.01;function initializeWorker(){if(!window.Worker)return console.error("Web Workers are not supported in your browser.");const e=new Blob(["\n        let stepDuration;\n        let timerID;\n\n        self.onmessage = ({ data }) => {\n            if (data.action === 'start') {\n                stepDuration = data.stepDuration * 500; // Convert to milliseconds\n                startScheduling();\n            } else if (data.action === 'stop') {\n                clearInterval(timerID);\n            }\n        };\n\n        function startScheduling() {\n            clearInterval(timerID);\n            timerID = setInterval(() => postMessage({ action: 'scheduleNotes' }), stepDuration);\n        }\n    "],{type:"application/javascript"}),t=URL.createObjectURL(e);audioWorker=new Worker(t),audioWorker.onmessage=({data:e})=>{"scheduleNotes"===e.action&&scheduleNotes()},window.addEventListener("beforeunload",cleanUpWorker)}function startWorker(){audioWorker?.postMessage({action:"start",stepDuration:getStepDuration()})}function stopWorker(){audioWorker?.postMessage({action:"stop"})}function getStepDuration(){return 60/(globalJsonData?.projectBPM||120)/4}function incrementStepAndSequence(e){currentStep=(currentStep+1)%64,0===currentStep&&(currentSequence=(currentSequence+1)%e)}async function initializePlayback(){await resumeAudioContext(),startPlaybackLoop(),startWorker(),console.log("Playback initialized")}function playBuffer(e,{startTrim:t,endTrim:n},a,o){t=Math.max(0,Math.min(t,1)),n=Math.max(t,Math.min(n,1));const i=t*e.duration,r=(n-t)*e.duration/(globalPlaybackSpeeds[a]||1),s=audioCtx.createBufferSource();s.buffer=e;const l=globalPlaybackSpeeds[a]||1;s.playbackRate.value=l;const c=audioCtx.createGain(),u=parseVolumeLevel(globalVolumeLevels[a]||1)*globalVolumeMultiplier,d=audioCtx.currentTime;c.gain.cancelScheduledValues(d),c.gain.setValueAtTime(0,d),c.gain.linearRampToValueAtTime(u,d+.01),s.connect(c),c.connect(audioCtx.destination),s.start(o,i,r),activeSources[a]||(activeSources[a]=[]),activeSources[a].push({source:s,gainNode:c})}async function stopPlayback(){console.log("Stopping all active sources"),Object.keys(activeSources).forEach((e=>{activeSources[e].forEach((({source:e,gainNode:t})=>{t.gain.cancelScheduledValues(audioCtx.currentTime),t.gain.setValueAtTime(t.gain.value,audioCtx.currentTime),t.gain.linearRampToValueAtTime(0,audioCtx.currentTime+.05),e.stop(audioCtx.currentTime+.05)})),activeSources[e]=[]})),setTimeout((()=>{audioCtx.suspend().then((()=>{resetPlaybackState(),console.log("Playback stopped and active sources cleared")}))}),50)}function resetPlaybackState(){currentSequence=0,currentStep=0,isReversePlay=!1,nextNoteTime=0,resetVisualState(),console.log("Playback-specific states reset.")}async function togglePlayback(){if(isToggleInProgress)return console.log("[togglePlayback] Playback toggle in progress, ignoring click.");isToggleInProgress=!0,console.log(`[togglePlayback] ${isPlaying?"Stopping":"Initiating"} playback...`);try{isPlaying?(await stopPlayback(),isPlaying=!1):(await initializePlayback(),isPlaying=!0)}catch(e){console.error("Error during playback toggle:",e)}finally{isToggleInProgress=!1}}function resetAllStates(){currentSequence=0,currentStep=0,isReversePlay=!1,nextNoteTime=0,resetVisualState(),console.log("All states reset to initial values.")}function resetVisualState(){"undefined"!=typeof cci2&&"undefined"!=typeof initialCCI2&&(cci2=initialCCI2),isChannel11Active=!1,isPlaybackActive=!1,activeChannelIndex=null,activeArrayIndex={},renderingState={},"function"==typeof immediateVisualUpdate&&immediateVisualUpdate()}function cleanUpWorker(){clearInterval(intervalID),audioWorker?.terminate(),audioCtx.suspend().then((()=>console.log("AudioContext suspended successfully.")))}async function resumeAudioContextIfNeeded(){"suspended"===audioCtx.state&&await audioCtx.resume()}