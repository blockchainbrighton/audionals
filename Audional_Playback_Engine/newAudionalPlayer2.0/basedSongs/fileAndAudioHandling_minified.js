const fadeDuration=.01;function notifyVisualizer(e,n){AudionalPlayerMessages.postMessage({action:"activeStep",channelIndex:e,step:n}),document.dispatchEvent(new CustomEvent("internalAudioPlayback",{detail:{action:"activeStep",channelIndex:e,step:n}}))}document.addEventListener("click",(async()=>{console.log("[fileAndAudioHandling.js] Click event detected."),"function"==typeof window.ensureAudioContextState?(await window.ensureAudioContextState(),console.log("[fileAndAudioHandling.js] AudioContext ensured."),await togglePlayback(),console.log("[fileAndAudioHandling.js] Playback started. Dispatching playbackStarted event."),document.dispatchEvent(new CustomEvent("playbackStarted"))):console.error("[fileAndAudioHandling.js] ensureAudioContextState is not defined or not a function")}));const defaultVolume=1;async function togglePlayback(){if(isToggleInProgress)return console.log("[togglePlayback] Playback toggle in progress, ignoring click.");isToggleInProgress=!0,console.log(`[togglePlayback] ${isPlaying?"Stopping":"Initiating"} playback...`);try{isPlaying?(await stopPlayback(),isPlaying=!1):(await initializePlayback(),isPlaying=!0)}catch(e){console.error("Error during playback toggle:",e)}finally{isToggleInProgress=!1}}function cleanUpWorker(){clearInterval(intervalID),audioWorker?.terminate(),audioCtx.suspend().then((()=>console.log("AudioContext suspended successfully.")))}window.addEventListener("beforeunload",cleanUpWorker);