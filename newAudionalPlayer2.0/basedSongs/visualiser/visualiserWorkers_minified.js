// visualiserWorkers.js

const workerScript='\nself.onmessage = function(e) {\n    const { id, vertices, primaryAndSecondaryColors } = e.data;\n\n    const colorsArray = generateColorsArray(primaryAndSecondaryColors, 5);\n    const updatedColors = vertices.map((v, index) => ({\n        index,\n        colors: [\n            getConditionalColor(v.x, v.y, 0.1, colorsArray[0], "black"),\n            getConditionalColor(v.x, v.y, 0.2, colorsArray[1], "black"),\n            getConditionalColor(v.x, v.y, 0.3, colorsArray[2], "black"),\n            getConditionalColor(v.x, v.y, 0.5, colorsArray[3], "black"),\n            getConditionalColor(v.x, v.y, 0.05, colorsArray[4], "black")\n        ]\n    }));\n\n    postMessage({ id, updatedColors });\n};\n\nconst generateColorsArray = (colors, length) => Array.from({ length }, () => colors[Math.floor(Math.random() * colors.length)].hex);\n\nconst getConditionalColor = (x, y, divisor, trueColor, falseColor) => \n    ((x / divisor | 0) + (y / divisor | 0)) % 111 === 0 ? trueColor : falseColor;\n',createWorkerFromScript=o=>{const r=new Blob([o],{type:"application/javascript"}),n=URL.createObjectURL(r),e=new Worker(n);return URL.revokeObjectURL(n),e},rainbowWorker=createWorkerFromScript(workerScript),sendRainbowRequest=(o,r,n,e)=>{rainbowWorker.postMessage({id:o,vertices:r,angle:n,primaryAndSecondaryColors:e})};rainbowWorker.onmessage=o=>{const{id:r,updatedColors:n}=o.data;updateScatterColors(r,n)};const visualizerWorkerScript='\nself.onmessage = function(e) {\n    const { type, id, data } = e.data;\n\n    switch (type) {\n        case \'COLOR_SETTINGS\':\n            handleColorSettings(id, data);\n            break;\n        case \'DYNAMIC_RGB\':\n            handleDynamicRGB(id, data);\n            break;\n        default:\n            console.error(\'Unknown message type:\', type);\n            break;\n    }\n};\n\nconst handleColorSettings = (id, { vertices, primaryAndSecondaryColors }) => {\n    const colorsArray = primaryAndSecondaryColors.map(color => color.hex);\n    const randomIndices = Array.from({ length: 5 }, () => Math.floor(Math.random() * colorsArray.length));\n    const updatedColors = vertices.map((v, index) => ({\n        index,\n        colors: [\n            getConditionalColor(v.x, v.y, 0.1, colorsArray[randomIndices[0]], "black"),\n            getConditionalColor(v.x, v.y, 0.2, colorsArray[randomIndices[1]], "black"),\n            getConditionalColor(v.x, v.y, 0.3, colorsArray[randomIndices[2]], "black"),\n            getConditionalColor(v.x, v.y, 0.5, colorsArray[randomIndices[3]], "black"),\n            getConditionalColor(v.x, v.y, 0.05, colorsArray[randomIndices[4]], "black")\n        ]\n    }));\n\n    postMessage({ type: \'COLOR_SETTINGS\', id, updatedColors });\n};\n\nconst handleDynamicRGB = (id, { randomValue, baseZ, factor }) => {\n    const scaledValue = (baseZ + 255) / (factor * 100);\n    const colorValue = Math.floor(randomValue * scaledValue * 255);\n    const rgbColor = colorValue > 0.01 ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : "#FF0000";\n    postMessage({ type: \'DYNAMIC_RGB\', id, rgbColor });\n};\n\nconst getConditionalColor = (x, y, divisor, trueColor, falseColor) => \n    ((x / divisor | 0) + (y / divisor | 0)) % 111 === 0 ? trueColor : falseColor;\n',visualizerWorker=createWorkerFromScript(visualizerWorkerScript),rotationWorkerScript="\nself.onmessage = function(e) {\n    const { id, vertices, pivot, angle } = e.data;\n    const updatedVertices = rotateVertices(vertices, pivot, angle);\n    postMessage({ id, updatedVertices });\n};\n\nconst rotateVertices = (vertices, pivot, angle) => {\n    const cosA = Math.cos(angle);\n    const sinA = Math.sin(angle);\n    return vertices.map(v => {\n        const dx = v.x - pivot.x;\n        const dy = v.y - pivot.y;\n        return { x: dx * cosA - dy * sinA + pivot.x, y: dx * sinA + dy * cosA + pivot.y, z: v.z };\n    });\n};\n",rotationWorker=createWorkerFromScript(rotationWorkerScript),sendRotationRequest=(o,r,n,e)=>{rotationWorker.postMessage({id:o,vertices:r,pivot:n,angle:e})};rotationWorker.onmessage=o=>{const{id:r,updatedVertices:n}=o.data;"cy"===r?cp.cy.updateVertices(n):r.startsWith("sp")&&cp[r].updateVertices(n)};