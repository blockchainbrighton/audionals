console.log("Colour settings level 5 loaded");

{
    const R = 100; // Set a default or required value for R in this context

    // Utility function to generate random RGB color
    function randomRGB(factor) {
        const randomComponent = () => Math.floor(Math.random() * 255 * factor);
        return `rgb(${randomComponent()}, ${randomComponent()}, ${randomComponent()})`;
    }

    // Utility function for grayscale color
    function calculateGrayscale(value, factor, threshold, multiplier = 1) {
        const colorValue = Math.floor(value * factor * multiplier);
        return colorValue > threshold ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : 'alternative-color';
    }

    // Utility function to apply glitch fade effect
    function glitchFade(rgb, period, threshold, R, z) {
        const factor = (z + R) / (2 * R);
        const time = Date.now() / period;
        const computeComponent = (colorComponent, fn) => Math.floor((fn(time) + 1) / 2 * factor * colorComponent);
        const r = computeComponent(rgb.r, Math.cos);
        const g = computeComponent(rgb.g, Math.sin);
        const b = computeComponent(rgb.b, Math.cos);
        return r > threshold ? `rgb(${r}, ${g}, ${b})` : 'alternative-color';
    }

    // Main function to get colors
    function getColors5(o, a, l) {
        const v = l;
        const now = Date.now();
        const randomValues = Array.from({ length: 50 }, Math.random);
        const sinValue = Math.abs(Math.sin(a / 3000));

        const l0zR = v[0].z + R;
        const factor = l0zR / (2 * R) * 255;

        // Precompute color functions to avoid repetition
        const getGrayscaleColor = (threshold, divisor, fn) => {
            const colorValue = Math.floor(fn ? fn() : Math.random() * (l0zR / (divisor * R) * 255));
            return colorValue > threshold ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : 'alternative-color';
        };

        // Using simple loops to avoid array.map for similar operations
        const greyScaleCrazyFrogs = [];
        const thresholdsAndDivisors = [
            { threshold: 128, divisor: 2 },
            { threshold: 64, divisor: 2 },
            { threshold: 32, divisor: 2 },
            { threshold: 16, divisor: 2 },
            { threshold: 8, divisor: 2 },
            { threshold: 64, divisor: 3 },
            { threshold: 32, divisor: 4 },
            { threshold: 16, divisor: 5 },
            { threshold: 8, divisor: 6 },
            { threshold: 100, divisor: 2, fn: () => (Math.cos(now) + 1) / 2 },
            { threshold: 75, divisor: 2, fn: () => (Math.sin(now) + 1) / 2, colorType: 'dark-mode-color' },
            { threshold: 90, divisor: 2, fn: () => Math.pow(Math.random(), 2) },
            { threshold: 60, divisor: 2, fn: () => Math.log(Math.random() * 10 + 1) / Math.log(11) },
            { threshold: 120, divisor: 2, fn: () => Math.pow(Math.random() * 2, 2) },
            { threshold: 10, divisor: 9 }
        ];

        for (let { threshold, divisor, fn } of thresholdsAndDivisors) {
            greyScaleCrazyFrogs.push(getGrayscaleColor(threshold, divisor, fn));
        }

        const spacemanEyes = `rgb(${Math.floor(randomValues[21] * factor)}, ${Math.floor(randomValues[21] * factor)}, ${Math.floor(randomValues[21] * factor)})`;

        const dynamicColor = ((lightness) => lightness > 128 ? `rgb(${lightness}, ${lightness}, ${lightness})` : 'dark-mode-color')(Math.random() * factor);

        const unpredictablePatternColor = (() => {
            const threshold = [64, 128, 32, 16].sort(() => 0.5 - Math.random())[0];
            const colorValue = Math.floor(Math.random() * factor);
            return colorValue > threshold ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : 'alternative-color';
        })();

        const dynamicRangeColor = (() => {
            const randomFactor = Math.random() < 0.5 ? 2 : 3;
            const colorValue = Math.floor(Math.random() * (l0zR / (randomFactor * R) * 255));
            return colorValue > 50 ? `rgb(${colorValue}, ${colorValue}, ${colorValue})` : 'dark-mode-color';
        })();

        const glitchColors = window.colorPalette.primary.flatMap(({ rgb }) => [
            glitchFade(rgb, 1000, 100, R, v[0].z),
            glitchFade(rgb, 2000, 75, R, v[0].z)
        ]);

        return [
            spacemanEyes,
            dynamicColor,
            ...greyScaleCrazyFrogs,
            unpredictablePatternColor,
            dynamicRangeColor,
            ...glitchColors
        ];
    }

    // Function to return the length of the array generated by getColors5
    function getColors5Length() {
        const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
        const length = getColors5(null, null, defaultL).length;
        console.log(`getColors5 length: ${length}`);
        return length;
    }

    // Log the length of the colors array when the file is loaded
    getColors5Length();
}
