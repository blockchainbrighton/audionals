// colourSettingsLevel0.js

{
    const R = 100; // Set a default or required value for R in this context
  
    // Function to get colors
    function getColors0(o, a, l) {
      const v = l; // Alias for clarity, where l represents vertices
  
      // Cache values of x, y, z for reuse
      const { x: x0, y: y0, z: z0 } = l[0];
      const { x: x1, y: y1 } = l[1];
      const { x: x2, y: y2 } = l[2];
  
      // Precompute z values
      const l0zR = z0 + R;
      const l1zR = l[1].z + R;
      const l2zR = l[2].z + R;
  
      // Pre-generate random values for reuse
      const randomValues = Array.from({ length: 6 }, () => Math.random());
      const colorFactor = randomValues[0] * ((l2zR + 255) / (11 * R) * 255);

  
      // Compute sine values for dynamic colors
      const now = Date.now();
      const sinNow = Math.sin(now);
  
      // Use a complete range of color indexes from 1 to 23
      const colorIndexes = Array.from({ length: 23 }, (_, i) => i + 1);

      // Return dynamic color settings
      return [

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // THE FIRST COLOUR SETTING LINE IN THE ARRAY IS THE ONE THAT IS USED WHEN THE PAGE LOADS
   

            colorFactor > 0.01 
            ? `rgb(${Math.floor(colorFactor)}, ${Math.floor(colorFactor)}, ${Math.floor(colorFactor)})`
            : "#FF0000", // THIS IS THE COLOUR THAT IS USED IN THE PLACEHOLDER WHEN THE PAGE LOADS


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
        // Repeated close and wide scatters with different divisors
        ...[10, 1.77].flatMap(divisor =>
          Array.from({ length: 5 }, (_, i) =>
            getConditionalColorWithIndex(l[0].x, l[0].y, divisor, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10][i], 1, window.colorPalette)
          )
        ),
  
  
      
      ];
    }
  
    // Function to return the length of the array generated by getColors1
    function getColors0Length() {
      // Safely generate a default color array for length calculation
      const defaultL = [{ z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }, { z: 0, x: 0, y: 0 }];
      const length = getColors0(null, null, defaultL).length;
      console.log(`getColors0 length: ${length}`);
      return length;
    }
  
    // Log the length of the colors array when the file is loaded
    getColors0Length();
  }