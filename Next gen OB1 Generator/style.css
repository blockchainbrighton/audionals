:root {
    /* Dark Theme Variables */
    --control-bg: #2a2a2a;        /* Dark grey for control background */
    --control-border: #444;       /* Medium grey for borders */
    --button-bg: #333;            /* Dark grey for buttons */
    --button-hover-bg: #555;      /* Lighter grey for button hover */
    --button-active-bg: #6a9a6a;  /* Muted green for active state */
    --disabled-opacity: 0.5;
    --error-color: #ff6b6b;       /* Brighter red for errors on dark background */

    /* Keep original light theme vars commented out for reference if needed */
    /* --control-bg: #f0f0f0; */
    /* --control-border: #ccc; */
    /* --button-bg: #e0e0e0; */
    /* --button-hover-bg: #d0d0d0; */
    /* --button-active-bg: #b0e0b0; */
    /* --error-color: #d9534f; */
}

* {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    background-color: #000000; /* Changed to black */
    color: #e0e0e0;            /* Changed to light grey text */
    margin: 0;
    padding: 20px;
    display: flex;
    justify-content: center;
}

.app-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    max-width: 600px;
    width: 100%;
}

h1 {
    text-align: center;
    margin-bottom: 10px;
    color: #f5f5f5; /* Changed to light grey/off-white */
}

#main-image {
    max-width: 100%;
    max-height: 400px; /* Limit image height */
    height: auto; /* Maintain aspect ratio */
    border: 2px solid var(--control-border); /* Uses updated variable */
    border-radius: 5px;
    cursor: pointer;
    object-fit: contain; /* Ensure image fits within bounds */
    /* --- Core Animation Setup --- */
    transform: scale(1);
    transition: transform 0.15s ease-out; /* Adjust timing as needed */
}
#main-image:active {
    transform: scale(0.98);
    transition-duration: 0.05s; /* Faster transition for click feedback */
}
/* --- Style for when the 'playing' class is added by JavaScript --- */
#main-image.playing {
    transform: scale(1.05); /* Make it slightly larger */
}


.controls {
    background-color: var(--control-bg); /* Uses updated variable */
    border: 1px solid var(--control-border); /* Uses updated variable */
    border-radius: 8px;
    padding: 20px;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.button-group {
    display: flex;
    justify-content: space-around; /* Space out buttons */
    flex-wrap: wrap; /* Allow buttons to wrap on small screens */
    gap: 10px;
    margin-bottom: 10px;
}

button {
    padding: 10px 15px;
    font-size: 1em;
    cursor: pointer;
    border: 1px solid var(--control-border); /* Uses updated variable */
    background-color: var(--button-bg); /* Uses updated variable */
    color: inherit; /* Inherit light text color from body */
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

button:hover:not(:disabled) {
    background-color: var(--button-hover-bg); /* Uses updated variable */
}

button.active {
    background-color: var(--button-active-bg); /* Uses updated variable */
    font-weight: bold;
    color: #111; /* Dark text for better contrast on the active green */
}

.control-group {
    display: flex;
    align-items: center;
    gap: 10px;
}

.control-group label {
    flex-basis: 60px; /* Fixed width for labels */
    text-align: right;
    font-size: 0.9em;
    /* Text color inherited from body */
}

.control-group input[type="range"] {
    flex-grow: 1; /* Slider takes remaining space */
    cursor: pointer;
    /* Basic styling for range input in dark mode - might need vendor prefixes for full styling */
    accent-color: var(--button-active-bg); /* Changes the slider thumb/track color */
}

.value-display {
    flex-basis: 75px; /* Fixed width for value display */
    text-align: right;
    font-family: monospace;
    font-size: 0.95em;
    min-width: 75px; /* Ensure it doesn't shrink too much */
    /* Text color inherited from body */
}

/* Disabled State */
.controls.disabled {
    opacity: var(--disabled-opacity);
    pointer-events: none; /* Prevent interaction with children */
}
/* Override pointer-events for the container itself if needed */
.controls.disabled {
   pointer-events: auto; /* Allow error message display? */
}

/* Explicitly disable elements within the disabled container */
.controls.disabled button,
.controls.disabled input,
.controls.disabled #main-image /* Style image too if needed */
{
    cursor: not-allowed;
    pointer-events: none; /* Ensure no clicks go through */
}

/* Error Message Styling */
.error {
    color: var(--error-color); /* Uses updated variable (brighter red) */
    font-weight: bold;
    text-align: center;
    padding: 5px;
    border: 1px solid var(--error-color); /* Uses updated variable */
    background-color: #401a1a; /* Dark red background */
    border-radius: 4px;
    min-height: 1.5em; /* Ensure space is reserved */
    display: none; /* Hidden by default */
}
.error:not(:empty) {
    display: block; /* Show only when it has content */
}

/* Basic Responsiveness */
@media (max-width: 480px) {
    .control-group {
        flex-direction: column;
        align-items: stretch; /* Stack label, slider, value */
        gap: 5px;
    }
    .control-group label,
    .value-display {
        text-align: left;
        flex-basis: auto; /* Reset fixed basis */
        width: 100%;
    }
    .value-display {
        text-align: center;
    }
    .button-group {
        flex-direction: column; /* Stack buttons vertically */
        align-items: stretch;
    }
}

/* #main-image animation styles remain the same */