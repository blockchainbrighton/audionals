/* --- Global Variables (Keep as is) --- */
:root {
    --control-bg: #2a2a2a;
    --control-border: #444;
    --button-bg: #333;
    --button-hover-bg: #555;
    --button-active-bg: #6a9a6a;
    --disabled-opacity: 0.5;
    --error-color: #ff6b6b;
}

/* --- Base Styles & Reset (Minor Adjustments) --- */
* {
    box-sizing: border-box;
}

html {
    height: 100%; /* Ensure html takes full height */
}

body {
    font-family: sans-serif;
    background-color: #000000;
    color: #e0e0e0;
    margin: 0;
    padding: 0; /* Remove default body padding */
    display: flex; /* Use flex to manage the main-layout container */
    min-height: 100vh; /* Ensure body takes at least full viewport height */
    /* Remove justify-content: center; - main-layout will handle centering */
    overflow: hidden; /* Prevent body scrollbars if content overflows slightly */
}

/* --- NEW Main Layout (Flexbox 3-Column) --- */
.main-layout {
    display: flex;
    align-items: center; /* Vertically center the columns content relative to each other */
    justify-content: center; /* Center the whole group if viewport is wider */
    width: 100%;
    height: 100vh; /* Make layout take full viewport height */
    padding: 20px; /* Add padding around the entire layout */
    gap: 20px; /* Space between columns */
}

/* --- Column 1: Controls Area --- */
.controls-column {
    flex: 1 1 0; /* Grow, Shrink, Basis 0 - Takes up available space */
    display: flex;
    flex-direction: column;
    gap: 20px; /* Space between title and controls block */
    overflow-y: auto; /* Allow controls to scroll if they exceed height */
    max-height: 100%; /* Don't exceed parent height */
    align-self: stretch; /* Make column stretch to full height */
    padding: 15px; /* Internal padding */
    background-color: var(--control-bg); /* Optional: Background for the whole column */
    border: 1px solid var(--control-border); /* Optional: Border for the whole column */
    border-radius: 8px; /* Optional: Rounded corners */
}

/* --- Column 2: Image Area (Fixed Size based on Viewport Height) --- */
.image-area {
    flex: 0 0 80vh; /* IMPORTANT: Don't grow, don't shrink, basis is 80vh (sets the WIDTH) */
    height: 80vh; /* IMPORTANT: Sets the HEIGHT */
    display: flex; /* Center the image within this area */
    justify-content: center;
    align-items: center;
    /* Remove padding/border here unless you want it *around* the image space */
}

/* --- Image Styling (Adjusted) --- */
#main-image {
    display: block; /* Ensure it behaves like a block element */
    width: 100%;    /* Fill the width of image-area (which is 80vh) */
    height: 100%;   /* Fill the height of image-area (which is 80vh) */
    object-fit: contain; /* Scale image down to fit, preserving aspect ratio */
    border: 2px solid var(--control-border); /* Keep border */
    border-radius: 5px; /* Keep radius */
    cursor: pointer; /* Keep cursor */
    transform: scale(1);
    transition: transform 0.15s ease-out;
    max-width: 100%; /* Redundant due to parent sizing, but safe */
    max-height: 100%;/* Redundant due to parent sizing, but safe */

    /* REMOVE max-width: 100%; - handled by parent */
    /* REMOVE max-height: 400px; - This was the main blocker */
    /* REMOVE height: auto; */
}
#main-image:active {
    transform: scale(0.98);
    transition-duration: 0.05s;
}
#main-image.playing { /* Keep animation class */
    transform: scale(1.05);
}


/* --- Column 3: Reference Area --- */
/* Ensure the column still handles overflow */
.reference-column {
    flex: 1 1 0;
    overflow-y: auto; /* THIS is where the scrollbar should appear if needed */
    max-height: 100%;
    align-self: stretch;
}

/* --- Reference Panel Styling (Adjusted) --- */
.reference-panel {
    /* REMOVE grid-column: 2; */
    background-color: var(--control-bg);
    border: 1px solid var(--control-border);
    border-radius: 8px;
    padding: 15px 20px;
    color: #ccc;
    display: none; /* Keep initial hidden state */
    width: 100%; /* Take full width of its column */
}
.reference-panel.show {
    display: block;
}

/* --- Title Bar Styling (No Changes Needed, but confirm location) --- */
.title-bar {
    /* Resides inside controls-column now */
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    /* margin-bottom: 10px; Removed, using column gap now */
    flex-shrink: 0; /* Prevent title bar from shrinking */
}
h1 { /* Keep as is */ }
#info-toggle-btn { /* Keep as is */ }


/* --- Controls Container Styling (Adjusted) --- */
.controls {
    /* Resides inside controls-column now */
    /* REMOVE width: 100%; (inherits from column or set explicitly if needed) */
    /* background-color, border, border-radius, padding, display: flex, flex-direction, gap */
    /* Keep these internal styles */
    background-color: transparent; /* Optional: Make controls background transparent if column has bg */
    border: none; /* Optional: Remove border if column has border */
    padding: 0; /* Optional: Remove padding if column has padding */
    width: 100%; /* Ensure it fills the control column width */
}

/* --- Button, Control Group, Slider, Value Display Styling (Keep as is) --- */
/* No changes needed for: */
.button-group { /* Keep as is */ }
button { /* Keep as is */ }
button:hover:not(:disabled) { /* Keep as is */ }
button.active { /* Keep as is */ }
.control-group { /* Keep as is */ }
.control-group label { /* Keep as is */ }
.control-group input[type="range"] { /* Keep as is */ }
.value-display { /* Keep as is */ }

/* --- State Styling (Keep as is) --- */
.controls.disabled { /* Keep as is */ }
.controls.disabled { /* Keep as is */ }
.controls.disabled button,
.controls.disabled input,
.controls.disabled #main-image { /* Keep as is */ } /* Note: Image disabling might be redundant now */
.error { /* Keep as is */ }
.error:not(:empty) { /* Keep as is */ }

/* --- Reference Panel Content Styling (Keep as is) --- */
/* No changes needed for: */
.reference-panel h2 { /* Keep as is */ }
.reference-panel h3 { /* Keep as is */ }
.reference-panel ul { /* Keep as is */ }
.reference-panel p,
.reference-panel li {
    color: inherit; /* Or set specific visible colors like #e0e0e0, #f5f5f5 */
}
.reference-panel code {
    color: #f0f0f0; /* Ensure code block text is visible */
}

.reference-panel p em { /* Keep as is */ }
.reference-panel p:last-of-type em { /* Keep as is */ }


/* --- Responsiveness (NEEDS MAJOR REVISION) --- */

/* Remove the old media queries completely for now. */
/* The new flex layout is inherently more responsive. */
/* We might need NEW media queries for very small screens if the 3-column layout becomes too cramped. */

/* Example: Stacking on small screens (e.g., below 700px width) */
@media (max-width: 700px) { /* Adjust breakpoint as needed */
    body {
        overflow: auto; /* Allow scrolling on small screens */
        height: auto; /* Let body height adjust to content */
        min-height: 100vh;
    }

    .main-layout {
        flex-direction: column; /* Stack columns vertically */
        height: auto; /* Allow layout height to grow */
        width: 100%;
        max-width: 500px; /* Limit width in stacked mode */
        margin: 0 auto; /* Center the stack */
        padding: 10px; /* Adjust padding */
    }

    .controls-column,
    .reference-column {
        flex-basis: auto; /* Reset flex basis */
        width: 100%; /* Take full width */
        max-height: none; /* Remove height restriction */
        overflow-y: visible; /* Don't need internal scroll */
        align-self: auto; /* Reset alignment */
    }

     .image-area {
        flex-basis: auto; /* Reset flex basis */
        /* Adjust image size for vertical layout */
        /* Option 1: Fixed height */
        /* height: 50vh; */
        /* width: 50vh; */
        /* Option 2: Width based */
        width: 90%; /* Take most of the container width */
        height: auto; /* Auto height */
        padding-bottom: 90%; /* Trick for square aspect ratio based on width */
        position: relative; /* Needed for aspect ratio trick */
    }

    #main-image {
         /* If using aspect-ratio trick */
        position: absolute;
        top: 0;
        left: 0;
        /* width/height 100% still apply */

        /* If using fixed vh sizing */
         /* width: 100%; */
         /* height: 100%; */
         /* position: static; */
    }

    .reference-panel {
         height: auto; /* Allow height to adjust to content */
    }
}

/* Optional: Further refinement for very small screens if needed */
@media (max-width: 480px) {
    /* Stack internal controls if not already done */
    .control-group {
        flex-direction: column;
        align-items: stretch;
        gap: 5px;
    }
    .control-group label,
    .value-display {
        text-align: left;
        flex-basis: auto;
        width: 100%;
    }
    .value-display {
        text-align: center;
    }
    .button-group {
        flex-direction: column;
        align-items: stretch;
    }
    h1 {
       font-size: 1.3em;
    }
}

/* --- REMOVED Old Grid and App Container Styles --- */
/* Remove these rules: */
/* .page-wrapper { ... } */
/* .app-container { ... } */
/* Any rules specifically targeting .app-container h1 etc. */